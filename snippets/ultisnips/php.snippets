#################
# MISCELLANEOUS #
#################

snippet php "php opening tag"
<?php
endsnippet

snippet re "return statement"
return ${1:'hello world'};
endsnippet

snippet dd "laravel die dump"
dd(${1});${0}
endsnippet

snippet die "php die and dump"
die(print_r(${1}));${0}
endsnippet

#####################
# TERNARY OPERATORS #
#####################

snippet =?: "ternary to variable"
$${1:foo} = ${2:true} ? ${3:a} : ${0};
endsnippet

snippet ?: "ternary operator"
${1:true} ? ${2:a} : ${0}
endsnippet

############
# COMMENTS #
############

snippet /** "class comment block"
/*
|---------------------------------------------------------------------------
| ${1}
|---------------------------------------------------------------------------
|
| ${2}
*/

${0}
endsnippet

snippet /* "function comment block"
/**
 * ${0:description}
 */
endsnippet

snippet @par "parameter comment"
@param {${1:type}} ${2:name} - ${0:description}
endsnippet

snippet @ret "return comment"
@return {${1:type}} ${0:description}
endsnippet

################
# FLOW CONTROL #
################

snippet wh "while loop"
while (${1:true}) {
  ${0}
}
endsnippet

snippet do "do while loop"
do {
  ${0}
} while (${1:true});
endsnippet

snippet switch "switch statement"
switch ($${1:var}) {
  case '${2:value}':
    ${3}
    break;
  ${0}
  default:
    ${4}
    break;
}
endsnippet

snippet case "case statement"
case '${1:value}':
  ${2}
  break;
endsnippet

snippet for "for loop"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
  ${0}
}
endsnippet

snippet fori "for each loop"
foreach ($${1:variable} as $${2:value}) {
  ${0}
}
endsnippet

snippet forik "for each key value loop"
foreach ($${1:variable} as $${2:key} => $${3:value}) {
  ${0}
}
endsnippet

snippet if "if statement"
if (${1:true}) {
  ${0}
}
endsnippet

snippet ifn "if not statement"
if (!${1:true}) {
  ${2}
}
endsnippet

snippet ife "if else statement"
if (${1:true}) {
  ${2}
} else {
  ${3}
}
${0}
endsnippet

snippet el "else statement"
else {
  ${0}
}
endsnippet

snippet eif "else if statement"
elseif (${1:true}) {
  ${0}
}
endsnippet

#############
# FUNCTIONS #
#############

#######################
# CLASSES OBJECTS ETC #
#######################

#############
# DEBUGGING #
#############

###########
# LARAVEL #
###########

# miscellaneous
snippet $ "this object"
$this->${1}
# methods
endsnippet

snippet met "method block"
public function ${1:methodName}() {
  ${0}
}
endsnippet

snippet pmet "protected method block"
protected function ${1:methodName}() {
  ${0}
}
endsnippet

snippet smet "static method block"
public static function ${1:methodName}() {
  ${0}
}
endsnippet

# routing
snippet rg "route get"
Route::get('${1:/}', ['as' => '${2:alias}', 'uses' => '${3}Controller@${4:method}']);
endsnippet

snippet rgc "route get closure"
Route::get('${1:/}', ['as' => '${2:alias}', 'uses' => function() {
  ${0}
}]);
endsnippet

snippet rga "route get anonymous"
Route::get('${1:/}', ['as' => '${2:alias}', 'uses' => function() {
  ${0}
}]);
endsnippet

snippet rgv "route get variable"
Route::get('${1:/}/{${2:var}}', ['as' => '${2:alias}', 'uses' => '${3}Controller@${4:method}']);
endsnippet

snippet rgvc "route get variable clousure"
Route::get('${1:/}/{${2:var}}', ['as' => '${2:alias}', 'uses' => function($$2) {
  ${0}
}]);
endsnippet

snippet rgva "route get variable anonymous"
Route::get('${1:/}/{${2:var}}', ['as' => '${2:alias}', 'uses' => function($$2) {
  ${0}
}]);
endsnippet

snippet rr "route resource"
Route::resource('${1:/}', '${2}Controller');
endsnippet

snippet rp "route post"
Route::post('${1:/}', ['as' => '${2:alias}', 'uses' => '${3}Controller@${4:method}']);
endsnippet

snippet rpc "route post closure"
Route::post('${1:/}', ['as' => '${2:alias}', 'uses' => function() {
  ${0}
}]);
endsnippet

snippet rpa "route post anonymous"
Route::post('${1:/}', ['as' => '${2:alias}', 'uses' => function() {
  ${0}
}]);
endsnippet

snippet rgrp "route group"
Route::group(['middleware' => '${1:auth}', 'prefix' => '${2:admin}'], function() {
  ${0}
});
endsnippet

# views:tab
snippet rv "return view"
return view('${1:view.name}', [
  '${2:var}' => $${3:$2},
]);
endsnippet

snippet rvs "return view simple"
return view('${1:view}');${0}
endsnippet

# schemas
snippet sc "schema create"
Schema::create('${1:table}', function(Blueprint $table)
{
  $table->increments('id');         // primary key
  $table->string('created_by');     // meta
  $table->string('updated_by');     // meta
  $table->string('deleted_by');     // meta
  $table->timestamps();             // meta
  $table->softDeletes();            // meta
});
endsnippet

snippet sd "schema drop"
Schema::drop('${1:table}');
endsnippet

################
# BOILERPLATES #
################

snippet model "base model boilerplate"
<?php namespace ${1:App}\Models;

use Illuminate\Database\Eloquent\Model;

class ${2:`!p snip.rv = snip.basename.capitalize()`} extends Model {
  protected $table = '${3:${2/./\l$0/g}}s';

  /**
   * Attributes accessible via fill method.
   *
   * @var array
   */
  protected $fillable = [
    '${3:field}',
  ];

  /**
   * Attributes that should be hidden for arrays.
   *
   * @var array
   */
  protected $hidden = [];

  /**
   * Rules
   *
   * $2 validation rules.
   *
   * @var array
   */
  public static $rules = [
      'email' => 'email',
  ];

  /**
   * Validation method.
   *
   * @return bool
   */
  public function isValid() {

      // build validation
      $validation = \Validator::make($this->attributes, static::$rules);

      // check for passing value
      if ($validation->passes()) {
        return true;
      }

      // build error messages
      $this->messages = $validation->messages();

      return false;

  }

}
endsnippet

snippet controller "base controller boilerplate"
<?php namespace ${1:App}\Http\Controllers;

use Illuminate\Http\Request;
use $1\Models\\${2:Model};
use $1\Http\Controllers\Controller;

class $2sController extends Controller {

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // Preparation                                                              //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  protected $${2/./\l$0/g};

  public function __construct($2 $${2/./\l$0/g}) {

    // create a new instance of ${2/./\l$0/g}
    $this->${2/./\l$0/g} = $${2/./\l$0/g};

  }

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // Helpers                                                                  //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // Public Methods                                                           //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  ${0}

}
endsnippet

snippet crudcontroller "crud controller boilerplate"
<?php namespace ${1:App}\Http\Controllers;

use Illuminate\Http\Request;
use $1\Models\\${2:Model};
use $1\Http\Controllers\Controller;

class $2sController extends Controller {

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // Preparation                                                              //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  protected $${2/./\l$0/g};

  public function __construct($2 $${2/./\l$0/g}) {

    // create a new instance of ${2/./\l$0/g}
    $this->${2/./\l$0/g} = $${2/./\l$0/g};

  }

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // Helpers                                                                  //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  //                                                                          //
  // CRUD                                                                     //
  //                                                                          //
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Index
   *
   * Display a listing of the resource.
   *
   * @return \Illuminate\Http\Response
   */
  public function index() {

    // gather published announcements
    $${2/./\l$0/g}s = $this->${2/./\l$0/g}->orderBy('order', 'desc')->paginate(50);

    // return view with the data
    return view('${2/./\l$0/g}s.index', [
      '${2/./\l$0/g}s' => $${2/./\l$0/g}s,
    ]);

  }

  /**
   * Create
   *
   * Show the form for creating a new ${2/./\l$0/g}.
   *
   * @return \Illuminate\Http\Response
   */
  public function create() {

    // return creation view
    return view('${2/./\l$0/g}s.create', [
    ]);

  }

  /**
   * Store
   *
   * Store a newly created ${2/./\l$0/g}.
   *
   * @return \Illuminate\Http\Response
   */
  public function store(Request $request) {

    // gather all posted input
    $input = $request->all();

    // fill the ${2/./\l$0/g} object with the input data and validate
    if (!$this->${2/./\l$0/g}->fill($input)->isValid()) {
      return redirect()->back()->withInput()->withErrors($this->${2/./\l$0/g}->messages);
    }

    // save record
    $this->${2/./\l$0/g}->push();

    // redirect to the ${2/./\l$0/g}s index
    return redirect()->route('${2/./\l$0/g}s.index')->with('alert', '${2/./\l$0/g} successfully created');

  }

  /**
   * Show
   *
   * Show the requested ${2/./\l$0/g}.
   *
   * @return \Illuminate\Http\Response
   */
  public function show($id) {

    // return creation view
    return view('${2/./\l$0/g}s.show', [
    ]);

  }

  /**
   * Edit
   *
   * Show the form for editing the specified ${2/./\l$0/g}.
   *
   * @param int $id The record id
   * @return \Illuminate\Http\Response
   */
  public function edit($id) {

    // return creation view
    return view('${2/./\l$0/g}s.edit', [
    ]);

  }

  /**
   * Update
   *
   * Update the specified ${2/./\l$0/g}.
   *
   * @param int $id The record id
   * @return \Illuminate\Http\Response
   */
  public function update(Request $request, $id) {

    // gather all posted input
    $input = $request->all();

    // get the record to update
    $this->${2/./\l$0/g} = $2::find($id);


    // fill the ${2/./\l$0/g} object with the input data and validate
    if (!$this->${2/./\l$0/g}->fill($input)->isValid()) {
      return redirect()->back()->withInput()->withErrors($this->${2/./\l$0/g}->messages);
    }

    // save record
    $this->${2/./\l$0/g}->push();

    // redirect to the ${2/./\l$0/g}s index
    return redirect()->route('${2/./\l$0/g}s.index')->with('alert', '${2/./\l$0/g} successfully updated');

  }

  /**
   * Destroy
   *
   * Remove the specified ${2/./\l$0/g}.
   *
   * @param int $id The record id
   * @return \Illuminate\Http\Response
   */
  public function destroy($id) {

      // fill the object with existing data
      $this->${2/./\l$0/g} = $2::find($id);

      // delete the record
      $this->${2/./\l$0/g}->delete();

      return redirect()->route('${2/./\l$0/g}s.index')->with('alert', '${2/./\l$0/g} successfully deleted');

  }

}
endsnippet
