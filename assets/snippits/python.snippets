priority -50

global !p
from snippet_helpers_python import *
endglobal

################################################################################
##                                                                            ##
##  miscellaneous                                                             ##
##                                                                            ##
################################################################################

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${0:${VISUAL:pass}}
endsnippet

################################################################################
##                                                                            ##
##  helpers                                                                   ##
##                                                                            ##
################################################################################

snippet p "print no quotes" b
print($0)
endsnippet

snippet pq "print with quotes" b
print('$0')
endsnippet

################################################################################
##                                                                            ##
##  flow control                                                              ##
##                                                                            ##
################################################################################

###################
#  if statements  #
###################

# if
snippet if "if" b
if ${1:condition}:
	${0:${VISUAL:pass}}
endsnippet

# if not
snippet ifn "if not" b
if not ${1:condition}:
	${0:${VISUAL:pass}}
endsnippet

# if and 
snippet ifa "if and if" b
if ${1:condition} and ${2:condition}:
	${0:${VISUAL:pass}}
endsnippet

# if or
snippet ifo "if or if" b
if ${1:condition} or ${2:condition}:
	${0:${VISUAL:pass}}
endsnippet

# if else
snippet ife "if else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${0:pass}
endsnippet

# if else if
snippet ifei "if else if" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${0:pass}
endsnippet

# else
snippet el "else chunck" b
else:
	${0:${VISUAL:pass}}
endsnippet

###########
#  loops  #
###########

# while
snippet wh "while" b
while ${1:True}:
	$0
end
endsnippet

# for
snippet for "for" b
for ${1:item} in ${2:iterable}:
	${0:${VISUAL:pass}}
endsnippet

# fori
snippet fori "for enumerated" b
for ${1:idx}, ${1:item} in enumerate(${2:iterable}):
	${0:${VISUAL:pass}}
endsnippet

# for range (in array)
snippet forr "for in range" b
for ${1:i} in range(${2:int}):
	${0:${VISUAL:pass}}
endsnippet

##############
#  switches  #
##############

# switch
snippet sw "switch" b
endsnippet

# case
snippet case "case" b
endsnippet

#############
#  ternary  #
#############

# ternary
snippet ?: "description" b
endsnippet

# ternary to variable
snippet =?: "description" b
endsnippet

################
#  exceptions  #
################

# try
snippet try "try / except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet trye "try / except / else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet

snippet tryf "try / except / finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet

snippet tryef "try / except / else / finally" b
try:
	${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet

################################################################################
##                                                                            ##
##  comments                                                                  ##
##                                                                            ##
################################################################################

snippet " "triple quoted string (double quotes)" b
"""
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, '"')`
endsnippet

snippet ' "triple quoted string (single quotes)" b
'''
${1:${VISUAL:doc}}
`!p triple_quotes_handle_trailing(snip, "'")`
endsnippet

snippet doc "doc block (triple quotes)"
`!p snip.rv = triple_quotes(snip)`
${1:${VISUAL:doc}}
`!p snip.rv = triple_quotes(snip)`
endsnippet

################################################################################
##                                                                            ##
##  functions                                                                 ##
##                                                                            ##
################################################################################

snippet deff "function or class method"
def ${1:fname}(`!p snip.rv = "self, " if snip.indent else ""`$2):
	$0
endsnippet

snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}):
	`!p snip.rv = triple_quotes(snip)`${4:TODO: Docstring for $1.}`!p
write_function_docstring(t, snip) `
	${5:${VISUAL:pass}}
endsnippet

################################################################################
##                                                                            ##
##  objects                                                                   ##
##                                                                            ##
################################################################################

snippet class "class with docstrings" b
class ${1:MyClass}(${2:object}):

	`!p snip.rv = triple_quotes(snip)`${3:Docstring for $1. }`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5:TODO: to be defined.}`!p
snip.rv = ""
snip >> 2

args = get_args(t[4])

write_docstring_args(args, snip)
if args:
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += '{0}'.format(triple_quotes(snip))

write_init_body(args, t[2], snip)
`
		$0
endsnippet

################################################################################
##                                                                            ##
##  templates                                                                 ##
##                                                                            ##
################################################################################

##################
#  boilerplates  #
##################

# read from a file
snippet #!read "#!/usr/bin/env python" b
#!/usr/bin/env python3
#
# ${1:Script Name}
#
# ${2:Script description.}
#
# Author(s): ${3:{{ Name }}}
#
# Requisite: ${4}
#
# Resources: ${5}
#
# Usage: ${6}
$0
dataFile = open('myfile.txt', 'r')
lines    = dataFile.read().splitlines()
# or
lines = []
with open('myfile.txt') as file:
	for line in file:
		lines.append(line)
endsnippet

# http requests
snippet #!req "#!/usr/bin/env python" b
#!/usr/bin/env python3
#
# ${1:Script Name}
#
# ${2:Script description.}
#
# Author(s): ${3:{{ Name }}}
#
# Requisite: ${4}
#
# Resources: ${5}
#
# Usage: ${6}
$0
import os
import sys
import json
import requests

################################################################################
##                                                                            ##
##  Config                                                                    ##
##                                                                            ##
################################################################################

# read in env variables
API_KEY = os.getenv('API_KEY')

# prep the headers
headers = {}
headers['apikey'] = API_KEY

################################################################################
##                                                                            ##
##  Functions                                                                 ##
##                                                                            ##
################################################################################

def request(method_type, url, headers, *args):
    """ Requests makes a defined request and returns the response.

        Args:
      method_type (str): [post|get]
      url (str): end point for request
            headers (dict): request headers
            args (dict): data to be posted

        Returns:
            requests.Response
    """
    methd_type = method_type.lower()
    try:
        if method_type == "post":
            return requests.post(url, headers=headers, data=args[0])
        if method_type == "get":
            return requests.get(url, headers=headers, data=args[0])
    except requests.RequestException as exception:
        sys.exit(exception)o

################################################################################
##                                                                            ##
##  Run                                                                       ##
##                                                                            ##
################################################################################

resp = request('get', 'myurl.tld/api/endpoint', headers, {})
body = resp.json()
print(resp.text)      # text of response body
print(resp.content)   # text of response bytes
print(body)
endsnippet

# shebang
snippet #! "#!/usr/bin/env python" b
#!/usr/bin/env python3
#
# ${1:Script Name}
#
# ${2:Script description.}
#
# Author(s): ${3:{{ Name }}}
#
# Requisite: ${4}
#
# Resources: ${5}
#
# Usage: ${6}
$0
endsnippet

# encoding
snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# -*- coding: utf-8 -*-
$0
endsnippet

# dunder main
snippet ifmain "ifmain" b
if __name__ == `!p snip.rv = get_quoting_style(snip)`__main__`!p snip.rv = get_quoting_style(snip)`:
	${1:${VISUAL:main()}}
endsnippet

######################
#  Common Functions  #
######################

# requests
snippet req "method for api requests" b
def request(method_type, url, headers, *args):
    """ Requests makes a defined request and returns the response.

		Args:
      method_type (str): [post|get]
      url (str): end point for request
			headers (dict): request headers
			args (dict): data to be posted

		Returns:
			requests.Response
    """
    method_type = method_type.lower()
    try:
        if method_type == "post":
            return requests.post(url, headers=headers, data=args[0])
        if method_type == "get":
            return requests.get(url, headers=headers, data=args[0])
    except requests.RequestException as exception:
        sys.exit(exception)
endsnippet

########################################
# Class & Special Method Name Snippets #
########################################

snippet contain "methods for emulating a container type" b
def __len__(self):
	${1:pass}

def __getitem__(self, key):
	${2:pass}

def __setitem__(self, key, value):
	${3:pass}

def __delitem__(self, key):
	${4:pass}

def __iter__(self):
	${5:pass}

def __reversed__(self):
	${6:pass}

def __contains__(self, item):
	${7:pass}
endsnippet


snippet context "context manager methods" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet


snippet attr "methods for customizing attribute access" b
def __getattr__(self, name):
	${1:pass}

def __setattr__(self, name, value):
	${2:pass}

def __delattr__(self, name):
	${3:pass}
endsnippet


snippet desc "methods implementing descriptors" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet


snippet cmp "methods implementing rich comparison"
def __eq__(self, other):
	${1:pass}

def __ne__(self, other):
	${2:pass}

def __lt__(self, other):
	${3:pass}

def __le__(self, other):
	${4:pass}

def __gt__(self, other):
	${5:pass}

def __ge__(self, other):
	${6:pass}

def __cmp__(self, other):
	${7:pass}
endsnippet


snippet repr "methods implementing string representation"
def __repr__(self):
	${1:pass}

def __str__(self):
	${2:pass}

def __unicode__(self):
	${3:pass}
endsnippet


# note: reflected operands and augmented arithmeitc assignements have been
# intentionally ommited to reduce verbosity.
snippet numeric "methods for emulating a numeric type" b
def __add__(self, other):
	${1:pass}

def __sub__(self, other):
	${2:pass}

def __mul__(self, other):
	${3:pass}

def __div__(self, other):
	${4:pass}

def __truediv__(self, other):
	${5:pass}

def __floordiv__(self, other):
	${6:pass}


def __mod__(self, other):
	${7:pass}

def __divmod__(self, other):
	${8:pass}

def __pow__(self, other):
	${9:pass}


def __lshift__(self, other):
	${10:pass}

def __rshift__(self, other):
	${11:pass}

def __and__(self, other):
	${12:pass}

def __xor__(self, other):
	${13:pass}

def __or__(self, other):
	${14:pass}


def __neg__(self):
	${15:pass}

def __pos__(self):
	${16:pass}

def __abs__(self):
	${17:pass}

def __invert__(self):
	${18:pass}


def __complex__(self):
	${19:pass}

def __int__(self):
	${20:pass}

def __long__(self):
	${21:pass}

def __float__(self):
	${22:pass}


def __oct__(self):
	${22:pass}

def __hex__(self):
	${23:pass}


def __index__(self):
	${24:pass}

def __coerce__(self, other):
	${25:pass}
endsnippet

# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet

##############
# PROPERTIES #
##############

snippet roprop "Read Only Property" b
@property
def ${1:name}(self):
	${2:return self._$1}$0
endsnippet

snippet rwprop "Read write property" b
def ${1:name}():
	`!p snip.rv = triple_quotes(snip) if t[2] else ''
`${2:TODO: Docstring for $1.}`!p
if t[2]:
	snip >> 1

	style = get_style(snip)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += format_return(style)
	snip.rv += '\n' + snip.mkline('', indent='')
	snip += triple_quotes(snip)
else:
	snip.rv = ""`
	def fget(self):
		return self._$1$0

	def fset(self, value):
		self._$1 = value
	return locals()

$1 = property(**$1(), doc=$1.__doc__)
endsnippet

######################
# Assertions & Tests #
######################

# vim:ft=snippets:
