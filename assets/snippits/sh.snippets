# set our default priority
priority -50

################################################################################
##                                                                            ##
##  ternary operators                                                         ##
##                                                                            ##
################################################################################

snippet =?:
endsnippet

snippet ?:
endsnippet

################################################################################
##                                                                            ##
##  comments                                                                  ##
##                                                                            ##
################################################################################

snippet /**
#
# ${0}
#
endsnippet

snippet /*
#
# ${0}
#
endsnippet

################################################################################
##                                                                            ##
##  flow control                                                              ##
##                                                                            ##
################################################################################

snippet wh "while loop frame"
while [[ ${1:condition} ]]; do
  ${0:#statements}
done
snippet do
endsnippet

snippet switch "switch statement frame"
case ${1:word} in
  ${2:pattern} )
    ${0}
    ;;
esac
endsnippet

snippet case "case statement frame"
${2:pattern} )
  ${0}
  ;;
endsnippet

snippet for "standard for loop frame"
for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
  ${0:#statements}
done
endsnippet

snippet fori "array for loop frame"
for ${1:needle} in ${2:haystack} ; do
  ${0:#statements}
done
endsnippet

snippet if "if statement frame"
if [[ ${1:condition} ]]; then
  ${0:#statements}
fi
endsnippet

snippet ife "if else statement frame"
if [[ ${1:condition} ]]; then
  ${2:#statements}
else
  ${3:#statements}
fi
endsnippet

snippet elif "else if statement"
elif [[ ${1:condition} ]]; then
  ${0:#statements}
endsnippet

snippet until "until loop frame"
until [[ ${1:condition} ]]; do
  ${0:#statements}
done
endsnippet

################################################################################
##                                                                            ##
##  functions                                                                 ##
##                                                                            ##
################################################################################

snippet usage "usage statement"
usage() {

  cat <<-ENDOFUSAGE
	usage: $(basename $0) [-hv] [-H <hostname>]

	  -h             Show usage.
	  -v             Increase verbosity of output.
	  -H <hostname>  Set desired hostname for the server.

	Description Text

	ENDOFUSAGE

  exit

}
endsnippet

################################################################################
##                                                                            ##
##  classes, objects, etc.                                                    ##
##                                                                            ##
################################################################################

################################################################################
##                                                                            ##
##  debugging                                                                 ##
##                                                                            ##
################################################################################

################################################################################
##                                                                            ##
##  boilerplates                                                              ##
##                                                                            ##
################################################################################

snippet opt "handle long and short options" b
PARAMS=""
while (( "$#" )); do
  case "\$1" in
    -v|--verbose-mode)
      LOGLEVEL=1
      shift
      ;;
    -b|--my-flag-with-argument)
      if [ -n "\$2" ] && [ \${2:0:1} != "-" ]; then
        SELECTED_HOSTNAME=\$2
        shift 2
      else
        echo "Error: Argument for \$1 is missing" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag \$1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS \$1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"
endsnippet

## REDIRECT HANDLING
snippet #!log "logging boilerplate" b
#!/bin/bash
#
# Redirects
#
# An example of how to use fd redirects to control (script) output / logging.
# Supports OSX and Linux. If USELOGFILE is set to true, all output regardless
# of loglevel will be output to the LOGFILE. Any LOGLEVEL < 2 will only output
# calls to the log function with a level <= to its value. A LOGLEVEL of 2 will
# output all stdout and stderr to the terminal.
#
# Author(s): Cody Buell
#
# Requisite: gsed (optional: if on osx to remove color codes from log file)
#
# Resources: 
#
# Usage: ./redirects.sh

################################################################################
##                                                                            ##
##  Configuration                                                             ##
##                                                                            ##
################################################################################

LOGLEVEL=0                      # log calls <= LOGLEVEL will print out to screen
USELOGFILE='true'               # log output to log files [true|false]
LOGFILE='redirects.out'         # fully pathed out log file

################################################################################
##                                                                            ##
##  Functions                                                                 ##
##                                                                            ##
################################################################################

## Log
 #
 # Helper function to output standardized and colorized log messages.
 # Example: log 1 info "Informational message"
 #
 # @param
 #  LOG_LEVEL (int): 0 1 or 2 to indicate when this log is printed
 #  LOG_TYPE (string): one of info|warn|error|fatal
 #  LOG_MSG (quoted string): freehand message
 #  LOG_MSG_RHS (quoted string): right-hand side log message (optional)
## @return VOID
log() {
  LOG_LEVEL=\$1
  LOG_TYPE=\$2
  LOG_MSG=\$3
  LOG_MSG_RHS=\$4
  PFRESET='\033[0m'
  TIMESTAMP=$(date +"%F_%T")
  PAD_C=$(printf '%0.1s' "."{1..80})
  PAD_L=60

  # set color codes
  case $LOG_TYPE in
    info )
      PFCOLOR='\033[0;32m'     # green
      ;;
    warn )
      PFCOLOR='\033[0;36m'     # teal
      ;;
    error )
      PFCOLOR='\033[0;33m'     # yellow
      ;;
    fatal )
      PFCOLOR='\033[0;31m'     # red
      ;;
    * )
      PFCOLOR='\033[0m'        # default
      ;;
  esac

  print_it_out() {
    # if right side is supplied then columnate
    if [ -n "$LOG_MSG_RHS" ]; then
      printf "%-29s%s %*.*s ${PFCOLOR}%s${PFRESET}\n" "${TIMESTAMP} (${LOG_TYPE})" "${LOG_MSG}" 0 $((PAD_L - ${#LOG_MSG} - ${#LOG_MSG_RHS} )) "$PAD_C" "$LOG_MSG_RHS"
    else
      printf "${PFCOLOR}%-29s%s${PFRESET}\n" "${TIMESTAMP} (${LOG_TYPE})" "${LOG_MSG}"
    fi
  }

  # $LOGLEVEL is the global setting, $LOG_LEVEL is the level of this particular message
  if [[ $LOGLEVEL -ge $LOG_LEVEL ]]; then
    # restore output handles
    set_redirects 2
    print_it_out $PFCOLOR $PFRESET
    # reset log level
    set_redirects $LOGLEVEL
  elif [[ "$USELOGFILE" == "true" ]]; then
    PFCOLOR=""
    PFRESET=""
    eval 'print_it_out >> $LOGFILE'
  fi
}

##
 # Set Redirects
 #
 # Configure output based on verbosity level. Create file descriptor 6 and 7 to
 # backup stdout and stderr, and perform appropriate file descriptor meddling /
 # juggling to get desired output. Avoid using fd5 as there are known issues
 # with subshells.
 #
 #  0 - no output except calls to log with a value of 0
 #  1 - not output except calls to log with a value of 0 or 1
 #  2 - verbose output, all command std out and std error
 #
 # @param 
 #   LEVEL (int): desired log level
## @return VOID
set_redirects() {
  case \$1 in
    0|1 )
      if [[ "$USELOGFILE" == "true" ]]; then
        eval 'exec 6>&1 1>>$LOGFILE'
        eval 'exec 7>&2 2>>$LOGFILE'
      else
        exec 6>&1 1>/dev/null
        exec 7>&2 2>/dev/null
      fi
      ;;
    2 )
      # if fd6 is being used
      [[ "$(uname)" == "Darwin" ]] && FD6=$(ls -1 /dev/fd | grep -c '^6$') || FD6=$(ls -1 /proc/$$/fd | grep -c '^6$')
      if [[ $FD6 -eq 1 ]]; then
        # restore output handles and output per normal
        exec 1>&6
        # remove the file descriptor
        exec 6>&-
      fi
      # if fd7 is being used
      [[ "$(uname)" == "Darwin" ]] && FD7=$(ls -1 /dev/fd | grep -c '^7$') || FD7=$(ls -1 /proc/$$/fd | grep -c '^7$')
      if [[ $FD7 -eq 1 ]]; then
        # restore output handles and output per normal
        exec 2>&7
        # remove the file descriptor
        exec 7>&-
      fi
      ;;
  esac
}

################################################################################
##                                                                            ##
##  Initialization                                                            ##
##                                                                            ##
################################################################################

if [[ "$USELOGFILE" == "true" ]]; then
  rm $LOGFILE &> /dev/null
  # if uselogfile, create target file with tee and point stdout and stderr to it
  # >(...) creates a target file / pid? that our file descriptors can point to
  # tee then handles splitting output to the terminal and a file
  exec 1> >(tee -a $LOGFILE)
  exec 2> >(tee -a $LOGFILE)

  # go the extra mile and strip ansi colors from output going into logfile
  # TODO: correct order of output, log 0 messages in this case get appended to
  # the end of the logfile rather than appearing in order of execution
  # if [[ "$(uname)" == "Darwin" ]] && which gsed &> /dev/null; then
  #   exec 1> >(tee >(gsed 's/\x1B\[[0-9;]*m//g' >> $LOGFILE))
  #   exec 2> >(tee >(gsed 's/\x1B\[[0-9;]*m//g' >> $LOGFILE))
  # else
  #   exec 1> >(tee >(sed  's/\x1B\[[0-9;]*m//g' >> $LOGFILE))
  #   exec 2> >(tee >(sed  's/\x1B\[[0-9;]*m//g' >> $LOGFILE))
  # fi
fi

# this needs to be called first
set_redirects $LOGLEVEL

################################################################################
##                                                                            ##
##  Run                                                                       ##
##                                                                            ##
################################################################################

# sample log messages
log 0 info "info log level 0"
log 0 warn "warn log level 0"
log 0 error "error log level 0"
log 0 fatal "fatal log level 0"
log 0 info "left hand side" "right hand side"
log 1 info "Log level 1"
log 2 info "Log level 2"

# a command with stderr output
curl https://google.crm

# general stdout output
echo "test echo output"
ls -l

# kludgy workaround to clean out ansi color codes from log file
if [[ "$(uname)" == "Darwin" ]] && which gsed &> /dev/null; then
  gsed -i 's/\x1B\[[0-9;]*m//g' $LOGFILE
else
  sed -i 's/\x1B\[[0-9;]*m//g' $LOGFILE
fi
endsnippet

################################################################################
##                                                                            ##
##  miscellaneous                                                             ##
##                                                                            ##
################################################################################

# vim:ft=snippets:
