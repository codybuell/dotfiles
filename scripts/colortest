#!/usr/bin/env zsh
################################################################################
##                                                                            ##
##  Color Test                                                                ##
##                                                                            ##
##  Comprehensive terminal color testing.                                     ##
##                                                                            ##
##  Usage:                                                                    ##
##    ./colortest             # Show menu and basic info                      ##
##    ./colortest menu        # Interactive menu                              ##
##    ./colortest basic       # Basic 8/16 colors                             ##
##    ./colortest 256         # 256-color palette                             ##
##    ./colortest all         # Everything (use with caution!)                ##
##                                                                            ##
##  See 'colortest help' for all options                                      ##
##                                                                            ##
################################################################################

###############################
#  Constants & Configuration  #
###############################

# Color definitions for consistent UI
readonly UI_HEADER='\e[1;36m'      # Bright cyan for headers
readonly UI_SUBHEADER='\e[1;33m'   # Yellow for subheaders
readonly UI_ACCENT='\e[1;35m'      # Magenta for accents
readonly UI_DIM='\e[2m'            # Dim text for notes
readonly UI_RESET='\e[0m'          # Reset formatting
readonly UI_SUCCESS='\e[1;32m'     # Green for success/positive
readonly UI_WARNING='\e[1;33m'     # Yellow for warnings

# Standard color mappings
readonly -A BASIC_COLORS=(
    [0]="black" [1]="red" [2]="green" [3]="yellow"
    [4]="blue" [5]="magenta" [6]="cyan" [7]="white"
)

# Base24 color mappings - standard colors (0-7)
readonly -A BASE24_STANDARD=(
    [0]="black:base00:BASE24_COLOR_00_HEX"
    [1]="red:base08:BASE24_COLOR_08_HEX"
    [2]="green:base0B:BASE24_COLOR_0B_HEX"
    [3]="yellow:base0A:BASE24_COLOR_0A_HEX"
    [4]="blue:base0D:BASE24_COLOR_0D_HEX"
    [5]="magenta:base0E:BASE24_COLOR_0E_HEX"
    [6]="cyan:base0C:BASE24_COLOR_0C_HEX"
    [7]="white:base05:BASE24_COLOR_05_HEX"
)

# Base24 color mappings - bright colors (8-15)
readonly -A BASE24_BRIGHT=(
    [8]="bright-black:base03:BASE24_COLOR_03_HEX"
    [9]="bright-red:base12:BASE24_COLOR_12_HEX"
    [10]="bright-green:base14:BASE24_COLOR_14_HEX"
    [11]="bright-yellow:base13:BASE24_COLOR_13_HEX"
    [12]="bright-blue:base16:BASE24_COLOR_16_HEX"
    [13]="bright-magenta:base17:BASE24_COLOR_17_HEX"
    [14]="bright-cyan:base15:BASE24_COLOR_15_HEX"
    [15]="bright-white:base07:BASE24_COLOR_07_HEX"
)

########################
#  Formatting Helpers  #
########################

# Print a main header with consistent formatting
print_header() {
    local title="$1"
    local width=60
    local inner_width=$((width - 2))  # Account for border characters
    local title_len=${#title}
    local left_pad=$(((inner_width - title_len) / 2))
    local right_pad=$((inner_width - left_pad - title_len))

    echo
    printf "${UI_HEADER}"
    printf "╭"
    printf "─%.0s" {1..$((width-2))}
    printf "╮${UI_RESET}\n"

    printf "${UI_HEADER}│%*s│${UI_RESET}\n" $inner_width " "
    printf "${UI_HEADER}│%*s%s%*s│${UI_RESET}\n" $left_pad " " "$title" $right_pad " "
    printf "${UI_HEADER}│%*s│${UI_RESET}\n" $inner_width " "

    printf "${UI_HEADER}"
    printf "╰"
    printf "─%.0s" {1..$((width-2))}
    printf "╯${UI_RESET}\n"
    echo
}

# Print a section header
print_section() {
    local title="$1"
    echo
    printf "${UI_SUBHEADER}▶ %s${UI_RESET}\n" "$title"
    printf "${UI_DIM}%s${UI_RESET}\n" "──$(printf "─%.0s" {1..${#title}})"
    echo
}

# Print a color sample with consistent formatting
print_color_sample() {
    local color_code="$1"
    local color_name="$2"
    local description="${3:-}"
    local format="${4:-38;5}"  # Default to 256-color foreground

    local sample_text="████"
    [[ -n "$description" ]] && sample_text="$description"

    printf "  %-3s %-12s \e[%s;%dm%s\e[0m" \
        "$color_code" "$color_name" "$format" "$color_code" "$sample_text"

    [[ -n "$description" ]] && printf " %s" "$description"
    printf "\n"
}

# Print a note/tip
print_note() {
    printf "${UI_DIM}  💡 %s${UI_RESET}\n" "$1"
}

# Print a warning
print_warning() {
    printf "${UI_WARNING}  ⚠️  %s${UI_RESET}\n" "$1"
}

#######################
#  Main Menu & Intro  #
#######################

# Show welcome message and basic terminal info
show_intro() {
    print_header "Terminal Color Tester"

    printf "Welcome! This tool helps you test and understand terminal colors.\n\n"

    # Basic terminal info in a compact format
    printf "${UI_SUBHEADER}Your Terminal:${UI_RESET}\n"
    printf "  TERM: %s\n" "$TERM"
    printf "  COLORTERM: %s\n" "${COLORTERM:-not set}"

    if command -v tput >/dev/null 2>&1; then
        local colors=$(tput colors 2>/dev/null || echo 'unknown')
        printf "  Colors: %s\n" "$colors"
    fi

    printf "  True color: "
    if [[ -n "$COLORTERM" && "$COLORTERM" =~ (truecolor|24bit) ]]; then
        printf "${UI_SUCCESS}Yes${UI_RESET}\n"
    else
        printf "${UI_WARNING}Maybe/No${UI_RESET}\n"
    fi

    echo
}

# Interactive menu
# Interactive menu
show_menu() {
    show_intro

    printf "${UI_SUBHEADER}Quick Options:${UI_RESET}\n"
    printf "  ${UI_ACCENT}basic${UI_RESET}     - Basic 8/16 colors (recommended start)\n"
    printf "  ${UI_ACCENT}256${UI_RESET}       - Full 256-color palette\n"
    printf "  ${UI_ACCENT}true${UI_RESET}      - True color (24-bit) test\n"
    printf "  ${UI_ACCENT}matrix${UI_RESET}    - Color combination matrix\n"
    printf "  ${UI_ACCENT}base24${UI_RESET}    - Base24 theme development helper\n"
    echo

    printf "${UI_SUBHEADER}Application-Specific:${UI_RESET}\n"
    printf "  ${UI_ACCENT}tmux${UI_RESET}      - Tmux color names and schemes\n"
    printf "  ${UI_ACCENT}neomutt${UI_RESET}   - Email client color reference\n"
    printf "  ${UI_ACCENT}neomutt-config${UI_RESET} - Analyze neomutt config issues\n"
    printf "  ${UI_ACCENT}git${UI_RESET}       - Git branch color suggestions\n"
    echo

    printf "${UI_SUBHEADER}More Options:${UI_RESET}\n"
    printf "  ${UI_ACCENT}full${UI_RESET}      - Full color test (everything!)\n"
    printf "  ${UI_ACCENT}help${UI_RESET}      - Full help and usage guide\n"
    echo

    print_note "Recommended start: basic"
    print_note "For troubleshooting: matrix"
    echo

    # Interactive prompt
    printf "${UI_SUBHEADER}Select an option:${UI_RESET} "
    read -r choice

    # Handle empty input as "full"
    if [[ -z "$choice" ]]; then
        choice="full"
    fi

    # Map "full" to "all" for the command lookup
    if [[ "$choice" == "full" ]]; then
        choice="all"
    fi

    # Execute the chosen option
    color_test "$choice"
}

#################
#  Color Tests  #
#################

# Base24 theme development helper
show_base24_mapping() {
    print_header "Base24 Theme Mapping"

    # Check if BASE24 environment variables are available
    if [[ -z "${BASE24_COLOR_00_HEX:-}" ]]; then
        print_warning "BASE24 environment variables not found"
        print_note "Run: export TINTED_SHELL_ENABLE_BASE24_VARS=1"
        print_note "Then source your base24 theme script to see hex values"
    fi

    print_section "Standard Colors (0-7)"
    printf "  %-20s %-8s %-15s %s\n" "Terminal Color" "Base24" "Hex" "Sample"
    printf "  ${UI_DIM}%-20s %-8s %-15s %s${UI_RESET}\n" "──────────────" "──────" "───────" "──────"

    for color_num in {0..7}; do
        local mapping=(${(s/:/)BASE24_STANDARD[$color_num]})
        local color_name=$mapping[1]
        local base_name=$mapping[2]
        local env_var=$mapping[3]
        local hex_value=${(P)env_var:-"#??????"}

        printf "  %-20s %-8s %-15s \e[38;5;%dm████ %s\e[0m\n" \
            "$color_num:$color_name" "$base_name" "$hex_value" "$color_num" "$base_name"
    done

    print_section "Bright Colors (8-15)"
    printf "  %-20s %-8s %-15s %s\n" "Terminal Color" "Base24" "Hex" "Sample"
    printf "  ${UI_DIM}%-20s %-8s %-15s %s${UI_RESET}\n" "──────────────" "──────" "───────" "──────"

    for color_num in {8..15}; do
        local mapping=(${(s/:/)BASE24_BRIGHT[$color_num]})
        local color_name=$mapping[1]
        local base_name=$mapping[2]
        local env_var=$mapping[3]
        local hex_value=${(P)env_var:-"#??????"}

        printf "  %-20s %-8s %-15s \e[38;5;%dm████ %s\e[0m\n" \
            "$color_num:$color_name" "$base_name" "$hex_value" "$color_num" "$base_name"
    done

    print_section "Additional Base24 Colors (not mapped to terminal 0-15)"
    printf "  %-8s %-15s %s\n" "Base24" "Hex" "Purpose"
    printf "  ${UI_DIM}%-8s %-15s %s${UI_RESET}\n" "──────" "───────" "───────"

    local additional_colors=(
        "base01:BASE24_COLOR_01_HEX:Background lighter"
        "base02:BASE24_COLOR_02_HEX:Selection background"
        "base04:BASE24_COLOR_04_HEX:Comments/disabled"
        "base06:BASE24_COLOR_06_HEX:Light foreground"
        "base09:BASE24_COLOR_09_HEX:Orange/constants"
        "base0F:BASE24_COLOR_0F_HEX:Brown/deprecated"
        "base10:BASE24_COLOR_10_HEX:Extra dark"
        "base11:BASE24_COLOR_11_HEX:Extra background"
    )

    for mapping in "${additional_colors[@]}"; do
        local base_name=${mapping%%:*}
        local env_var=${mapping#*:}; env_var=${env_var%%:*}
        local purpose=${mapping##*:}
        local hex_value=${(P)env_var:-"#??????"}

        printf "  %-8s %-15s %s\n" "$base_name" "$hex_value" "$purpose"
    done

    echo ""
    print_note "To adjust a color, modify the corresponding base in your YAML"
    print_note "Example: 'bright-red too bright' → adjust base12 in YAML"
    print_note "Example: 'cyan too dark' → adjust base0C in YAML"
    echo ""
}

# Basic 8 colors
# Basic 8 colors - improved compact version
show_basic_colors() {
    print_header "Basic Terminal Colors"

    print_section "Standard & Bright Colors"
    printf "  %-4s %-10s %-6s         %-4s %-16s %-6s\n" "Code" "Standard" "Sample" "Code" "Bright" "Sample"
    printf "  ${UI_DIM}%-4s %-10s %-6s         %-4s %-16s %-6s${UI_RESET}\n" "────" "────────" "──────" "────" "──────" "──────"

    for i in {0..7}; do
        printf "  %-4s %-10s \e[38;5;%dm██████\e[0m         %-4s %-16s \e[38;5;%dm██████\e[0m\n" \
            "$i" "${BASIC_COLORS[$i]}" "$i" \
            "$((i+8))" "bright-${BASIC_COLORS[$i]}" "$((i+8))"
    done

    print_section "Readable Color Combinations"
    printf "  White text on colored backgrounds:\n\n  "
    for i in {0..7}; do
        printf "\e[48;5;%dm\e[38;5;15m %s \e[0m " "$i" "${BASIC_COLORS[$i]:0:3}"
    done
    printf "\n\n  Black text on bright backgrounds:\n\n  "
    for i in {8..15}; do
        local short_name="${BASIC_COLORS[$((i-8))]}"
        printf "\e[48;5;%dm\e[38;5;0m %s \e[0m " "$i" "${short_name:0:3}"
    done
    printf "\n\n  Mixed combinations (good for UI elements):\n\n  "
    # Show some practical combinations
    printf "\e[48;5;4m\e[38;5;15m blue/white \e[0m "      # Blue bg, white text
    printf "\e[48;5;2m\e[38;5;0m green/black \e[0m "      # Green bg, black text
    printf "\e[48;5;3m\e[38;5;0m yellow/black \e[0m "     # Yellow bg, black text
    printf "\e[48;5;7m\e[38;5;4m white/blue \e[0m "       # White bg, blue text
    printf "\e[48;5;8m\e[38;5;15m gray/white \e[0m "      # Gray bg, white text
    echo -e "\n"

    print_note "These are the foundation colors used by most terminal applications"
    print_note "Colors 0-7 are 'normal', 8-15 are 'bright' variants"
    print_note "Format: \\e[38;5;Nm (foreground) \\e[48;5;Nm (background)"
    echo ""
}

# 256-color palette
show_256_colors() {
    print_header "256-Color Palette"

    print_section "Standard Colors (0-15)"
    printf "  "
    for i in {0..15}; do
        printf "\e[48;5;%dm%3d\e[0m" "$i" "$i"
        [[ $((($i + 1) % 8)) -eq 0 ]] && echo "  " && printf "  "
    done
    echo

    print_section "216-Color Cube (16-231)"
    print_note "Organized as 6×6×6 RGB cube (216 colors total)"
    printf "  "
    for i in {16..231}; do
        printf "\e[48;5;%dm%3d\e[0m" "$i" "$i"
        [[ $((($i - 15) % 6)) -eq 0 ]] && printf " "
        [[ $((($i - 15) % 36)) -eq 0 ]] && echo "  " && printf "  "
    done

    print_section "Grayscale Ramp (232-255)"
    print_note "24 shades from dark to light gray"
    printf "  "
    for i in {232..255}; do
        printf "\e[48;5;%dm%3d\e[0m" "$i" "$i"
        [[ $((($i - 231) % 12)) -eq 0 ]] && echo "  " && printf "  "
    done
    echo

    print_note "Use any number 0-255 in applications that support 256 colors"
    print_note "Example: tmux set -g status-bg colour237"
    echo
}

# True color test
show_true_colors() {
    print_header "True Color (24-bit) Test"

    # Check if terminal supports true color
    if [[ ! (-n "$COLORTERM" && "$COLORTERM" =~ (truecolor|24bit)) ]]; then
        print_warning "True color not detected. Results may vary"
    else
        print_note "True color support detected!"
    fi

    print_section "RGB Color Gradients"
    printf "  Red:   "
    for i in {0..255..3}; do
        printf "\e[38;2;%d;0;0m█\e[0m" "$i"
    done
    echo

    printf "  Green: "
    for i in {0..255..3}; do
        printf "\e[38;2;0;%d;0m█\e[0m" "$i"
    done
    echo

    printf "  Blue:  "
    for i in {0..255..3}; do
        printf "\e[38;2;0;0;%dm█\e[0m" "$i"
    done
    echo

    print_section "Rainbow Spectrum"
    printf "  "
    local cols=128
    for i in {0..127}; do
        local r=$((255 - (i * 255 / cols)))
        local g=$((i * 510 / cols))
        local b=$((i * 255 / cols))

        # Triangle wave for green (up to 255, then back down)
        if ((g > 255)); then
            g=$((510 - g))
        fi

        printf "\e[38;2;%d;%d;%dm█\e[0m" "$r" "$g" "$b"
    done
    echo -e "\n"

    print_note "True color uses RGB format: \\e[38;2;R;G;Bm for foreground"
    print_note "Background format: \\e[48;2;R;G;Bm (R,G,B each 0-255)"
    print_note "Example: echo '\\e[38;2;255;100;50mOrange text\\e[0m'"
    echo
}

# Color picker helper
show_color_picker() {
  echo
  echo "=== Your Current Git Branch Color ==="
  echo "Your git branch currently uses color 3 (yellow):"
  printf "Example: \e[38;5;3mgit-branch-name\e[0m\n"

  echo -e "\nAlternative colors for git branches:"
  local suggestions=(
    "2:green:Good for indicating clean/ready state"
    "4:blue:Professional, easy to read"
    "5:magenta:Distinctive, stands out well"
    "6:cyan:Modern, good contrast"
    "12:bright-blue:256-color option"
    "208:orange:256-color option"
  )

  for suggestion in "${suggestions[@]}"; do
    local color_num=${suggestion%%:*}
    local color_name=${suggestion#*:}
    color_name=${color_name%%:*}
    local description=${suggestion##*:}
    printf "Color %s (%s): \e[38;5;%dm sample-branch-name\e[0m - %s\n" \
      "$color_num" "$color_name" "$color_num" "$description"
  done
  echo
}

# Neomutt color mapping helper
show_neomutt_colors() {
    local mode=${1:-basic}

    case $mode in
        basic) _show_neomutt_basic_colors ;;
        config) _show_neomutt_config_analysis ;;
        all) _show_neomutt_basic_colors; _show_neomutt_config_analysis ;;
    esac
}

_show_neomutt_basic_colors() {
    print_header "Neomutt Color Reference"

    print_section "Basic neomutt colors (foreground)"
    printf "%-15s %-8s %s\n" "Neomutt Name" "Code" "Sample"
    printf "%-15s %-8s %s\n" "────────────" "────" "──────"

    for i in {0..7}; do
        local name=${BASIC_COLORS[$i]}
        printf "%-15s %-8s \e[38;5;%dm████ Sample text in %s\e[0m\n" \
            "$name" "$i" "$i" "$name"
    done

    print_section "Bright neomutt colors (foreground)"
    printf "%-15s %-8s %s\n" "Neomutt Name" "Code" "Sample"
    printf "%-15s %-8s %s\n" "────────────" "────" "──────"

    for i in {8..15}; do
        local name="bright${BASIC_COLORS[$((i-8))]}"
        printf "%-15s %-8s \e[38;5;%dm████ Sample text in %s\e[0m\n" \
            "$name" "$i" "$i" "$name"

        # Special note for brightcyan
        if [[ "$name" == "brightcyan" ]]; then
            printf "%15s %8s \e[38;5;%dm     ↑ This is what 'brightcolor6' renders as!\e[0m\n" \
                "" "" "$i"
        fi
    done

    print_section "Background color examples"
    printf "%-15s %s\n" "Color" "Sample with white text"
    printf "%-15s %s\n" "─────" "──────────────────────"

    for i in {0..7}; do
        local name=${BASIC_COLORS[$i]}
        printf "%-15s \e[48;5;%dm\e[38;5;15m Sample background \e[0m\n" \
            "$name" "$i"
    done

    for i in {8..15}; do
        local name="bright${BASIC_COLORS[$((i-8))]}"
        printf "%-15s \e[48;5;%dm\e[38;5;15m Sample background \e[0m\n" \
            "$name" "$i"
    done

    print_section "Neomutt special colors"
    printf "%-15s %s\n" "Name" "Description"
    printf "%-15s %s\n" "────" "───────────"
    printf "%-15s %s\n" "default" "Terminal's default color"
    printf "%-15s %s\n" "normal" "Alias for default"

    print_note "Neomutt also supports:"
    printf "• 256 colors: Use numbers 0-255 (same as terminal codes)\n"
    printf "• RGB colors: color status '#ff0000' '#000000' (newer versions)\n\n"

    print_section "Common neomutt color schemes"
    printf "Status bar (blue background, bright white text):\n"
    printf "  color status brightwhite blue → \e[48;5;4m\e[38;5;15m Status: 5 new messages \e[0m\n\n"

    printf "Selected item (bright cyan background, black text):\n"
    printf "  color indicator black brightcyan → \e[48;5;14m\e[38;5;0m > Selected Message Subject \e[0m\n\n"

    printf "New mail (bright red text):\n"
    printf "  color index brightred default → \e[38;5;9mN  From: sender@example.com  Subject\e[0m\n\n"

    printf "Header fields (bright yellow text):\n"
    printf "  color header brightyellow default → \e[38;5;11mFrom:\e[0m sender@example.com\n\n"

    print_note "Answering your question: 'brightcolor6' = brightcyan = color 14"
    printf "This renders as: \e[38;5;14m████ Bright cyan text\e[0m\n\n"
}

# Neomutt config analyzer - analyzes your actual mutt config
_show_neomutt_config_analysis() {
    print_header "Your Current Neomutt Config Analysis"

    print_section "Likely sources of your 'dark neon blue' issue"

    printf "1. Message indicator (current selection in index):\n"
    printf "   Line 15: color indicator color0 color4\n"
    printf "   → \e[48;5;4m\e[38;5;0m > Current selected message \e[0m\n"
    printf "   This uses color4 (blue) background - likely your 'dark neon blue'\n\n"

    printf "2. Sidebar highlight:\n"
    printf "   Line 42: color sidebar_highlight color0 color4\n"
    printf "   → \e[48;5;4m\e[38;5;0m INBOX (5) \e[0m\n"
    printf "   Same blue background as indicator\n\n"

    printf "3. Status bar (footer under message list):\n"
    printf "   Line 56: color status color20 color19\n"
    printf "   → \e[38;5;20m\e[48;5;19m Mutt: ~/Mail/INBOX [Msgs:42 New:5] \e[0m\n"
    printf "   color20 = \e[38;5;20m████\e[0m (dark blue text)\n"
    printf "   color19 = \e[48;5;19m    \e[0m (dark red/maroon background)\n\n"

    printf "4. Date column in message index:\n"
    printf "   Line 21: color index_date color4 default\n"
    printf "   → \e[38;5;4mDec 15\e[0m (blue text in date column)\n\n"

    print_section "RECOMMENDED FIXES"

    printf "To fix the blue indicator/selection color (most likely culprit):\n"
    printf "Change line 15 from:\n"
    printf "   \e[2mcolor indicator color0 color4\e[0m\n"
    printf "To one of these alternatives:\n"
    printf "   color indicator color0 color6        → \e[48;5;6m\e[38;5;0m black on cyan \e[0m\n"
    printf "   color indicator brightwhite color8   → \e[48;5;8m\e[38;5;15m white on gray \e[0m\n"
    printf "   color indicator color4 color7        → \e[48;5;7m\e[38;5;4m blue on light gray \e[0m\n"
    printf "   color indicator default color237     → \e[48;5;237m\e[38;5;15m default on dark gray \e[0m\n\n"

    printf "To fix the status bar color (if that's the issue):\n"
    printf "Change line 56 from:\n"
    printf "   \e[2mcolor status color20 color19\e[0m\n"
    printf "To something more readable:\n"
    printf "   color status brightwhite color4      → \e[48;5;4m\e[38;5;15m white on blue \e[0m\n"
    printf "   color status color0 color7           → \e[48;5;7m\e[38;5;0m black on light gray \e[0m\n"
    printf "   color status default default         → \e[48;5;0m\e[38;5;15m terminal default \e[0m\n\n"

    print_note "Also consider updating the sidebar highlight (line 42) to match:"
    printf "   color sidebar_highlight brightwhite color8\n\n"

    print_warning "Your current color scheme uses a lot of blues:"
    printf "• color4 (blue) appears on lines: 7, 15, 16, 21, 42, 53\n"
    printf "• This creates a very blue-heavy interface\n\n"

    print_note "Quick test: Try this temporary change to see if it fixes the issue:"
    printf "   :exec 'color indicator default color237' in neomutt\n\n"
}

# Enhanced neomutt color reference with your config colors highlighted
show_neomutt_config_colors() {
  echo "=== Colors Used in Your Config ==="
  echo

  # Show all the colors used in their config
  local your_colors=(
    "color0:black"
    "color1:red"
    "color3:yellow"
    "color4:blue"
    "color5:magenta"
    "color6:cyan"
    "color8:brightblack"
    "color19:dark_red_bg"
    "color20:dark_blue_text"
    "color237:dark_gray"
    "color246:light_gray"
    "color255:very_light_gray"
    "brightcolor1:brightred"
    "brightcolor4:brightblue"
    "brightcolor6:brightcyan"
  )

  printf "%-20s %-8s %s\n" "Your Config Color" "Code" "Visual Sample"
  printf "%-20s %-8s %s\n" "─────────────────" "────" "─────────────"

  for color_info in "${your_colors[@]}"; do
    local name=${color_info%%:*}
    local desc=${color_info##*:}

    # Extract numeric part for display
    local code=""
    case "$name" in
      color*) code=${name#color} ;;
      brightcolor*) code=$((${name#brightcolor} + 8)) ;;
    esac

    if [[ -n "$code" ]]; then
      printf "%-20s %-8s \e[38;5;%dm████ %s\e[0m" "$name" "$code" "$code" "$desc"

      # Special annotations for problematic colors
      case "$name" in
        color4) echo " ← Used in indicator, sidebar, dates (your blue issue!)" ;;
        color20) echo " ← Used in status bar" ;;
        color19) echo " ← Used as status bar background" ;;
        *) echo ;;
      esac
    fi
  done
  echo
}

# Tmux color name mapping
show_tmux_colors() {
  echo "=== Tmux Color Names ==="
  echo
  echo "Basic tmux color names (same as terminal):"
  printf "%-15s %-8s %s\n" "Tmux Name" "Code" "Sample"
  printf "%-15s %-8s %s\n" "─────────" "────" "──────"

  local tmux_basic=(
    "black:0"
    "red:1"
    "green:2"
    "yellow:3"
    "blue:4"
    "magenta:5"
    "cyan:6"
    "white:7"
  )

  for mapping in "${tmux_basic[@]}"; do
    local name=${mapping%%:*}
    local code=${mapping##*:}
    printf "%-15s %-8s \e[38;5;%dm████ %s\e[0m\n" \
      "$name" "$code" "$code" "$name"
  done

  echo
  echo "Bright tmux color names:"
  printf "%-15s %-8s %s\n" "Tmux Name" "Code" "Sample"
  printf "%-15s %-8s %s\n" "─────────" "────" "──────"

  local tmux_bright=(
    "brightblack:8"
    "brightred:9"
    "brightgreen:10"
    "brightyellow:11"
    "brightblue:12"
    "brightmagenta:13"
    "brightcyan:14"
    "brightwhite:15"
  )

  for mapping in "${tmux_bright[@]}"; do
    local name=${mapping%%:*}
    local code=${mapping##*:}
    printf "%-15s %-8s \e[38;5;%dm████ %s\e[0m\n" \
      "$name" "$code" "$code" "$name"
  done

  echo
  echo "Tmux also accepts:"
  echo "• colour0-colour255 (256-color palette)"
  echo "• #ffffff (hex colors)"
  echo "• default (terminal's default color)"
  echo
}

# Tmux color format examples
show_tmux_formats() {
  echo "=== Tmux Color Format Examples ==="
  echo
  echo "Different ways to specify the same color in tmux:"
  echo

  local examples=(
    "Red:red:colour1:#ff0000:1"
    "Green:green:colour2:#00ff00:2"
    "Blue:blue:colour4:#0000ff:4"
    "Cyan:cyan:colour6:#00ffff:6"
    "Gray:colour237:colour237:#3a3a3a:237"
  )

  printf "%-8s %-12s %-10s %-8s %s\n" "Color" "Name" "Colour#" "Hex" "Sample"
  printf "%-8s %-12s %-10s %-8s %s\n" "─────" "────────" "────────" "───────" "──────"

  for example in "${examples[@]}"; do
    local color_name=${example%%:*}
    local name_format=${example#*:}; name_format=${name_format%%:*}
    local colour_format=${example#*:*:}; colour_format=${colour_format%%:*}
    local hex_format=${example#*:*:*:}; hex_format=${hex_format%%:*}
    local code=${example##*:}

    printf "%-8s %-12s %-10s %-8s \e[38;5;%dm████ %s\e[0m\n" \
      "$color_name" "$name_format" "$colour_format" "$hex_format" "$code" "$color_name"
  done

  echo
  echo "Usage in tmux config:"
  echo "set -g status-bg red              # Named color"
  echo "set -g status-bg colour1          # 256-color"
  echo "set -g status-bg '#ff0000'        # Hex color"
  echo "set -g status-bg default          # Terminal default"
  echo
}

# Tmux visual examples
show_tmux_examples() {
  echo "=== Tmux Visual Examples ==="
  echo
  echo "How colors appear in different tmux elements:"
  echo

  echo "1. Status bar (status-bg, status-fg):"
  printf "   \e[48;5;4m\e[38;5;15m [0] 0:zsh*              \"hostname\" 14:52 03-Jan-25 \e[0m\n"
  echo "   set -g status-bg blue"
  echo "   set -g status-fg white"
  echo

  echo "2. Current window (window-status-current-bg, window-status-current-fg):"
  printf "   \e[48;5;2m\e[38;5;0m[1] 1:vim*\e[0m \e[48;5;8m\e[38;5;7m 2:shell \e[0m \e[48;5;8m\e[38;5;7m 3:logs \e[0m\n"
  echo "   set -g window-status-current-bg green"
  echo "   set -g window-status-current-fg black"
  echo

  echo "3. Pane borders (pane-border-fg, pane-active-border-fg):"
  echo "   ┌─────────────┬─────────────┐"
  printf "   │\e[38;5;8m     pane 1     \e[0m│\e[38;5;2m     pane 2     \e[0m│  ← active pane (green)\n"
  echo "   │             │             │"
  printf "   │\e[38;5;8m               \e[0m│\e[38;5;2m               \e[0m│\n"
  echo "   └─────────────┴─────────────┘"
  echo "   set -g pane-border-fg brightblack"
  echo "   set -g pane-active-border-fg green"
  echo

  echo "4. Message/command line (message-bg, message-fg):"
  printf "   \e[48;5;3m\e[38;5;0m:set synchronize-panes on                                    \e[0m\n"
  echo "   set -g message-bg yellow"
  echo "   set -g message-fg black"
  echo

  echo "5. Copy mode (mode-bg, mode-fg):"
  printf "   \e[48;5;5m\e[38;5;15m[0/50] COPY MODE - Use arrow keys to select text          \e[0m\n"
  echo "   set -g mode-bg magenta"
  echo "   set -g mode-fg white"
  echo
}

# Tmux color scheme suggestions
show_tmux_schemes() {
  echo "=== Tmux Color Scheme Suggestions ==="
  echo

  echo "1. Classic Blue Theme:"
  echo "   set -g status-bg colour4           # Blue background"
  echo "   set -g status-fg white             # White text"
  echo "   set -g window-status-current-bg colour12  # Bright blue"
  echo "   set -g window-status-current-fg black     # Black text"
  echo "   set -g pane-active-border-fg colour12     # Bright blue active"
  echo "   set -g pane-border-fg colour8             # Gray inactive"
  printf "   Preview: \e[48;5;4m\e[38;5;15m [tmux] \e[48;5;12m\e[38;5;0m 1:active \e[48;5;4m\e[38;5;15m 2:inactive \e[0m\n"
  echo

  echo "2. Modern Dark Theme:"
  echo "   set -g status-bg colour235         # Dark gray"
  echo "   set -g status-fg colour250         # Light gray"
  echo "   set -g window-status-current-bg colour2   # Green"
  echo "   set -g window-status-current-fg black     # Black text"
  echo "   set -g pane-active-border-fg colour2      # Green active"
  echo "   set -g pane-border-fg colour238           # Medium gray"
  printf "   Preview: \e[48;5;235m\e[38;5;250m [tmux] \e[48;5;2m\e[38;5;0m 1:active \e[48;5;235m\e[38;5;250m 2:inactive \e[0m\n"
  echo

  echo "3. High Contrast Theme:"
  echo "   set -g status-bg black             # Black background"
  echo "   set -g status-fg white             # White text"
  echo "   set -g window-status-current-bg white     # White current"
  echo "   set -g window-status-current-fg black     # Black text"
  echo "   set -g pane-active-border-fg yellow       # Yellow active"
  echo "   set -g pane-border-fg colour8             # Gray inactive"
  printf "   Preview: \e[48;5;0m\e[38;5;15m [tmux] \e[48;5;15m\e[38;5;0m 1:active \e[48;5;0m\e[38;5;15m 2:inactive \e[0m\n"
  echo

  echo "4. Base24 Compatible Theme (if Base24 vars available):"
  if [[ -n "${BASE24_COLOR_00_HEX:-}" ]]; then
    echo "   set -g status-bg '${BASE24_COLOR_01_HEX}'     # base01 - bg lighter"
    echo "   set -g status-fg '${BASE24_COLOR_04_HEX}'     # base04 - comments"
    echo "   set -g window-status-current-bg '${BASE24_COLOR_0D_HEX}' # base0D - blue"
    echo "   set -g window-status-current-fg '${BASE24_COLOR_00_HEX}' # base00 - bg"
  else
    echo "   # Export TINTED_SHELL_ENABLE_BASE24_VARS=1 to see hex values"
    echo "   set -g status-bg colour18          # base01 equivalent"
    echo "   set -g status-fg colour20          # base04 equivalent"
    echo "   set -g window-status-current-bg colour4   # base0D (blue)"
    echo "   set -g window-status-current-fg colour0   # base00 (bg)"
  fi
  echo

  echo "5. Minimal Theme:"
  echo "   set -g status-bg default           # Use terminal background"
  echo "   set -g status-fg default           # Use terminal foreground"
  echo "   set -g window-status-current-bg colour237  # Subtle highlight"
  echo "   set -g window-status-current-fg default    # Terminal foreground"
  echo "   set -g pane-active-border-fg colour6       # Cyan active"
  echo "   set -g pane-border-fg colour238            # Dark gray"
  printf "   Preview: \e[48;5;0m\e[38;5;15m [tmux] \e[48;5;237m\e[38;5;15m 1:active \e[48;5;0m\e[38;5;15m 2:inactive \e[0m\n"
  echo
}

# Tmux color testing helper
show_tmux_test_commands() {
  echo "=== Tmux Color Testing Commands ==="
  echo
  echo "Test colors without editing config file:"
  echo

  echo "1. Test status bar colors:"
  echo "   tmux set -g status-bg red"
  echo "   tmux set -g status-fg white"
  echo

  echo "2. Test window colors:"
  echo "   tmux set -g window-status-current-bg green"
  echo "   tmux set -g window-status-current-fg black"
  echo

  echo "3. Test pane borders:"
  echo "   tmux set -g pane-active-border-fg yellow"
  echo "   tmux set -g pane-border-fg colour8"
  echo

  echo "4. Reset to defaults:"
  echo "   tmux set -g status-bg default"
  echo "   tmux set -g status-fg default"
  echo "   # Or reload your tmux config:"
  echo "   tmux source-file ~/.tmux.conf"
  echo

  echo "5. Quick color picker for current session:"
  echo "   # Try these one by one to see immediate effects:"
  local quick_tests=(
    "tmux set -g status-bg blue"
    "tmux set -g status-bg green"
    "tmux set -g status-bg colour237"
    "tmux set -g status-bg '#2e3440'"
  )

  for test in "${quick_tests[@]}"; do
    echo "   $test"
  done
  echo
}

# Enhanced color matrix function - consolidates colortest.sh functionality with legends
show_enhanced_matrix() {
    print_header "Color Combination Matrix"
    _show_matrix_legend
    _show_matrix_grid
    _show_matrix_notes
}

_show_matrix_legend() {
    print_section "Understanding the Matrix"
    printf "This matrix shows every combination of foreground and background colors.\n"
    printf "• ${UI_ACCENT}Numbers across the top${UI_RESET} = Background colors (ANSI codes 40-49)\n"
    printf "• ${UI_ACCENT}Numbers down the side${UI_RESET} = Foreground colors (ANSI codes 30-37, 90-97)\n"
    printf "• Each cell shows text with that color combination\n"
    printf "• Four rows per foreground: Normal, Bold, Blink, Bold+Blink\n\n"

    print_section "Background Colors (Top Row Numbers)"
    printf "  ${UI_DIM}Code  Color${UI_RESET}\n"
    printf "  40 = Black      44 = Blue       48 = (none)\n"
    printf "  41 = Red        45 = Magenta    49 = Default\n"
    printf "  42 = Green      46 = Cyan\n"
    printf "  43 = Yellow     47 = White\n\n"

    print_section "Foreground Colors (Left Side Numbers)"
    printf "  ${UI_DIM}Standard Colors:${UI_RESET}\n"
    printf "  30 = Black      34 = Blue       38 = (none)\n"
    printf "  31 = Red        35 = Magenta    39 = Default\n"
    printf "  32 = Green      36 = Cyan\n"
    printf "  33 = Yellow     37 = White\n\n"
    printf "  ${UI_DIM}Bright Colors:${UI_RESET}\n"
    printf "  90 = Bright Black    94 = Bright Blue\n"
    printf "  91 = Bright Red      95 = Bright Magenta\n"
    printf "  92 = Bright Green    96 = Bright Cyan\n"
    printf "  93 = Bright Yellow   97 = Bright White\n\n"

    print_section "Usage Examples"
    printf "From the matrix below, you can see how to use these codes:\n"
    printf "• ${UI_ACCENT}\\e[31;42m${UI_RESET} = Red text on green background\n"
    printf "• ${UI_ACCENT}\\e[1;33;44m${UI_RESET} = Bold yellow text on blue background\n"
    printf "• ${UI_ACCENT}\\e[97;40m${UI_RESET} = Bright white text on black background\n"
    printf "• Always end with ${UI_ACCENT}\\e[0m${UI_RESET} to reset formatting\n\n"
}

_show_matrix_grid() {
    print_section "Color Matrix"

    # ANSI escape sequences
    local ESC=$'\x1b'
    local CSI="${ESC}["
    local RST="${CSI}m"

    printf "       40      41      42      43      44      45      46      47      49\n"

    # Generate the matrix
    for fg in 30 31 32 33 34 35 36 37 39 90 91 92 93 94 95 96 97; do
        local l1="$fg  "
        local l2="    "
        local l3="    "
        local l4="    "

        for bg in 40 41 42 43 44 45 46 47 49; do
            l1="${l1}${CSI}${fg};${bg}m Normal ${RST}"
            l2="${l2}${CSI}${fg};${bg};1m Bold   ${RST}"
            l3="${l3}${CSI}${fg};${bg};5m Blink  ${RST}"
            l4="${l4}${CSI}${fg};${bg};1;5m Bold!  ${RST}"
        done

        printf "$l1\n"
        printf "$l2\n"
        printf "$l3\n"
        printf "$l4\n"
    done
}

_show_matrix_notes() {
    print_section "Notes & Troubleshooting"

    print_note "If blinking doesn't work:"
    printf "   • Most modern terminals disable blinking by default\n"
    printf "   • Kitty: Add 'text_blink_interval 0.5' to ~/.config/kitty/kitty.conf\n"
    printf "   • Some terminals ignore blink codes entirely\n\n"

    print_note "Script usage:"
    printf '   echo -e "\\e[31mRed text\\e[0m"\n'
    printf '   printf "\\e[1;34mBold blue\\e[0m\\n"\n'
    printf '   RED="\\e[31m"; RESET="\\e[0m"; echo "${RED}Error${RESET}"\n\n'

    print_note "Common combinations:"
    printf "   Error messages: \\e[1;31m (bold red)\n"
    printf "   Success messages: \\e[1;32m (bold green)\n"
    printf "   Warnings: \\e[1;33m (bold yellow)\n"
    printf "   Info/links: \\e[1;34m (bold blue)\n"
    printf "   Highlights: \\e[7m (reverse video)\n\n"
}

# Main function
# Main function
color_test() {
    local choice=${1:-menu}

    # Command lookup table
    local -A commands=(
        [menu]="show_menu"
        [basic]="show_basic_colors"
        [256]="show_256_colors"
        [true]="show_true_colors"
        [base24]="show_base24_mapping"
        [git]="show_color_picker"
        [neomutt]="show_neomutt_colors basic"
        [neomutt-config]="show_neomutt_colors config"
        [neomutt-all]="show_neomutt_colors all"
        [tmux]="show_tmux_colors; show_tmux_formats"
        [tmux-examples]="show_tmux_examples"
        [tmux-schemes]="show_tmux_schemes"
        [tmux-test]="show_tmux_test_commands"
        [tmux-all]="show_tmux_colors; show_tmux_formats; show_tmux_examples; show_tmux_schemes; show_tmux_test_commands"
        [matrix]="show_enhanced_matrix"
        [all]="show_basic_colors; show_256_colors; show_true_colors; show_base24_mapping; show_enhanced_matrix"
        [full]="show_basic_colors; show_256_colors; show_true_colors; show_base24_mapping; show_enhanced_matrix"
    )

    if [[ -n "${commands[$choice]}" ]]; then
        eval "${commands[$choice]}"
    else
        printf "${UI_WARNING}Unknown option: %s${UI_RESET}\n" "$choice"
        echo
        show_menu
    fi
}

# Help function
color_test_help() {
    print_header "Color Test Help"

    printf "Usage: ${UI_ACCENT}./colortest [option]${UI_RESET}\n\n"

    printf "${UI_SUBHEADER}Basic Tests:${UI_RESET}\n"
    printf "  ${UI_ACCENT}basic${UI_RESET}         - Basic 8/16 colors (recommended start)\n"
    printf "  ${UI_ACCENT}256${UI_RESET}           - Full 256-color palette\n"
    printf "  ${UI_ACCENT}true${UI_RESET}          - True color (24-bit) test\n"
    printf "  ${UI_ACCENT}matrix${UI_RESET}        - Color combination matrix\n"
    printf "  ${UI_ACCENT}all${UI_RESET}           - All basic tests together\n"
    echo

    printf "${UI_SUBHEADER}Theme Development:${UI_RESET}\n"
    printf "  ${UI_ACCENT}base24${UI_RESET}        - Base24 theme mapping helper\n"
    printf "  ${UI_ACCENT}git${UI_RESET}           - Git branch color suggestions\n"
    echo

    printf "${UI_SUBHEADER}Application-Specific:${UI_RESET}\n"
    printf "  ${UI_ACCENT}neomutt${UI_RESET}       - Email client color reference\n"
    printf "  ${UI_ACCENT}neomutt-config${UI_RESET} - Analyze neomutt config issues\n"
    printf "  ${UI_ACCENT}neomutt-all${UI_RESET}    - Complete neomutt color guide\n"
    printf "  ${UI_ACCENT}tmux${UI_RESET}          - Tmux color names and formats\n"
    printf "  ${UI_ACCENT}tmux-examples${UI_RESET}  - Tmux visual examples\n"
    printf "  ${UI_ACCENT}tmux-schemes${UI_RESET}   - Tmux color scheme suggestions\n"
    printf "  ${UI_ACCENT}tmux-test${UI_RESET}      - Tmux color testing commands\n"
    printf "  ${UI_ACCENT}tmux-all${UI_RESET}       - All tmux information\n"
    echo

    printf "${UI_SUBHEADER}Other:${UI_RESET}\n"
    printf "  ${UI_ACCENT}menu${UI_RESET}          - Show interactive menu (default)\n"
    printf "  ${UI_ACCENT}help${UI_RESET}          - This help message\n"
    echo

    print_note "Run without arguments to see the interactive menu"
    print_note "Most useful starting points: basic, 256, base24, matrix"
}

# Handle command line arguments
case "${1:-}" in
  help|--help|-h)
    color_test_help
    ;;
  *)
    color_test "$1"
    ;;
esac
