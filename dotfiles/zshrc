################################################################################
##                                                                            ##
##  ZSH                                                                       ##
##                                                                            ##
################################################################################

################################################################################
##                                                                            ##
##  Profiling (uncomment when needed)                                         ##
##                                                                            ##
##  See: https://stackoverflow.com/a/4351664/2103996                          ##
##                                                                            ##
################################################################################

###########################
#  Per-Command Profiling  #
###########################

# zmodload zsh/datetime
# setopt promptsubst
# PS4='+$EPOCHREALTIME %N:%i> '
# exec 3>&2 2> startlog.$$
# setopt xtrace prompt_subst

############################
#  Per-Function Profiling  #
############################

# zmodload zsh/zprof

################################################################################
##                                                                            ##
##  Global                                                                    ##
##                                                                            ##
################################################################################

# Create a hash table for globally stashing variables without polluting main
# scope with a bunch of identifiers.
typeset -A __BUELL

# For reporting on what modules are loaded.
typeset -a __ZSH_MODULES_LOADED

# Set our path for storage of configurations, cache, etc.
__BUELL[ZSH_CONFIG_DIR]="${HOME}/.zsh"
mkdir -p "${__BUELL[ZSH_CONFIG_DIR]}"{modules,cache}
mkdir -p ~/.config/{tmux,kitty}

# Ensure these arrays are unique (contain no duplicate values).
typeset -U path cdpath fpath manpath

# Navigation & Directory Stack
setopt autocd               # .. is shortcut for cd .. (etc)
setopt autoparamslash       # tab completing directory appends a slash
setopt autopushd            # cd automatically pushes old dir onto dir stack
setopt pushdignoredups      # don't push multiple copies of same dir onto stack
setopt pushdsilent          # don't print dir stack after pushing/popping

# File Operations
setopt clobber              # allow clobbering with >, no need to use >!
setopt nonomatch            # unmatched patterns are left unchanged

# History Operations
setopt histignorealldups    # filter duplicates from history
setopt histignorespace      # don't record commands starting with a space
setopt histverify           # confirm history expansion (!$, !!, !foo)
setopt sharehistory         # share history across shells
setopt EXTENDED_HISTORY     # save timestamps in history

# Input & Control
setopt noflowcontrol        # disable start (C-s) and stop (C-q) characters
setopt interactivecomments  # allow comments, even in interactive shells

# Disabled Options (uncomment to enable)
# setopt printexitvalue      # print exit status for non-zero exits
# setopt ignoreeof           # prevent accidental C-d from exiting shell
# setopt correct             # command auto-correction
# setopt correctall          # argument auto-correction

################################################################################
##                                                                            ##
##  Helpers                                                                   ##
##                                                                            ##
################################################################################

# PATH helpers
path_prepend() { [[ -d $1 ]] && path=($1 $path); }
path_append()  { [[ -d $1 ]] && path=($path $1); }

# Module reload management
reload_module() {
  emulate -L zsh
  local module=$1

  if [[ -z "$module" ]]; then
    echo "Usage: reload_module <module_name>"
    echo "Available modules:"
    ls "${__BUELL[ZSH_CONFIG_DIR}/modules"/*.zsh | sed 's|.*/||; s|\.zsh$||'
    return 1
  fi

  local module_file="${__BUELL[ZSH_CONFIG_DIR]}/modules/${module}.zsh"
  if [[ ! -r "$module_file" ]]; then
    echo "Module '$module' not found"
    return 1
  fi

  # Clear the loaded flag to force reload
  unset "__BUELL[MODULES_LOADED_${module}]"

  # For modules with expensive initialization, clear those guards too
  case "$module" in
    *nvm*)
      unset "__BUELL[NVM_INITIALIZED]"
      ;;
  esac

  echo "Reloading module: $module"
  source "$module_file"
  __BUELL[MODULES_LOADED_${module}]=1
}

# Force reload on all modules
reload_all_modules() {
  emulate -L zsh
  echo "Reloading all modules..."

  # Clear all module guards
  for key in ${(k)__BUELL}; do
    if [[ "$key" =~ "^(MODULES_LOADED_|.*_INITIALIZED|KUBECTL_COMPLETION_LOADED)" ]]; then
      unset "__BUELL[$key]"
    fi
  done

  # Clear the tracking array
  __ZSH_MODULES_LOADED=()

  # Reload all modules
  for f in "${__BUELL[ZSH_CONFIG_DIR]}"/modules/*.zsh(N); do
    local module_name=${f:t:r}
    if [[ -r "$f" ]]; then
      echo "  Loading: $module_name"
      source "$f"
      __BUELL[MODULES_LOADED_${module_name}]=1
      __ZSH_MODULES_LOADED+=(${module_name})
    fi
  done
}

# Print debugging information for the modules
zsh_debug() {
  echo "=== ZSH Configuration Debug ==="
  echo "ZSH_CONFIG_DIR: ${__BUELL[ZSH_CONFIG_DIR]}"
  echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"
  echo "Guard variables:"
  for key in ${(ko)__BUELL}; do
    if [[ "$key" =~ "(LOADED|MODULE)" ]]; then
      echo "  $key = ${__BUELL[$key]}"
    fi
  done
}

# Force a refresh of completions
refresh_completions() {
  echo "Rebuilding completion cache..."
  rm -f "${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump"*
  autoload -Uz compinit
  compinit -d "${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump"
  echo "Completion cache refreshed"
}

################################################################################
##                                                                            ##
##  History                                                                   ##
##                                                                            ##
################################################################################

###################
#  Configuration  #
###################

export HISTSIZE=100000                     # Commands to keep in memory
export HISTFILE="${HOME}/.zsh_history"     # History file location
export SAVEHIST=$HISTSIZE                  # Commands to save to file

########################
#  Search Enhancement  #
########################

# Enhanced history search that supports pattern matching
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# See zsh/modules/04-bindings.zsh for keybindings

################################################################################
##                                                                            ##
##  Completions                                                               ##
##                                                                            ##
################################################################################

###################
#  Configuration  #
###################

# Prepend our custom completions to fpath
fpath=(~/.zsh/completions $fpath)

# Enable menu selection interface for completions
zstyle ':completion:*' menu select

# Fall through to cd if cdr is passed a non-recent dir as an argument
zstyle ':chpwd:*' recent-dirs-default true

# Use colors in completions (matches ls colors)
zstyle ':completion:*' list-colors ''

# Group completions by type/source
zstyle ':completion:*' group-name ''

# Allow stacking -i and -t options like -it and still support completion
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# Configure completion matching rules
#   `'m:{[:lower:][:upper:]}={[:upper:][:lower:]}'`: Case-insensitive matching
#   `'r:|[._-]=* r:|=*'`: Allow matching w or wo separators (ie. f.b -> foo.bar)
#   `'l:|=* r:|=*'`: Enable substring matching (ie. bar -> foobar)
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Keep cdpath functional but don't show in autocompletions
# This prioritizes local directories over cdpath entries
zstyle ':completion:*:complete:(cd|pushd):*' tag-order \
  'local-directories named-directories'

###########################
#  Initialize Completion  #
###########################

# Autoload compinit
autoload -Uz compinit

# Enhanced cache invalidation logic
_should_rebuild_completion_cache() {
  local cache_file="${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump"

  # Always rebuild if cache doesn't exist
  [[ ! -f "$cache_file" ]] && return 0

  # Check if main config is newer
  [[ "$HOME/.zshrc" -nt "$cache_file" ]] && return 0

  # Check if any completion functions are newer
  local completion_dir="$HOME/.zsh/completions"
  if [[ -d "$completion_dir" ]]; then
    local completion_files=("$completion_dir"/_*(N))
    for comp_file in "${completion_files[@]}"; do
      [[ "$comp_file" -nt "$cache_file" ]] && return 0
    done
  fi

  # Check if cache is older than 1 day (handles edge cases)
  [[ $(( $(date +%s) - $(stat -f %m "$cache_file" 2>/dev/null || stat -c %Y "$cache_file" 2>/dev/null || echo 0) )) -gt 86400 ]] && return 0

  return 1
}

# Use cached zcompdump file with enhanced invalidation
if _should_rebuild_completion_cache; then
  compinit -d "${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump"
  # Force rebuild of completion cache
  rm -f "${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump.zwc" 2>/dev/null
else
  compinit -C -d "${__BUELL[ZSH_CONFIG_DIR]}/cache/zcompdump"
fi

# Clean up helper function
unfunction _should_rebuild_completion_cache

###############################
#  Tool-Specific Completions  #
###############################

# Docker (allow stacking Docker options like -it)
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

################################################################################
##                                                                            ##
##  Modules                                                                   ##
##                                                                            ##
################################################################################

# reload_module 02-color           # Reload a specific module
# reload_module 99-nvm             # Reload NVM module (clears NVM_LOADED guard)
# reload_all_modules               # Reload everything
#
# echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"  # List loaded modules
# print -l ${(kv)__BUELL}                                # See what's in __BUELL

# Load all modules from the configuration path
for f in "${__BUELL[ZSH_CONFIG_DIR]}"/modules/*.zsh(N); do
  local module_name=${f:t:r}

  if [[ -z "${__BUELL[MODULES_LOADED_${module_name}]:-}" ]]; then
    if [[ -r "$f" ]]; then
      source "$f"
      __BUELL[MODULES_LOADED_${module_name}]=1
      __ZSH_MODULES_LOADED+=(${module_name})
    else
      echo "Warning: Cannot read $f" >&2
    fi
  fi
done

################################################################################
##                                                                            ##
##  Finalization                                                              ##
##                                                                            ##
##  Final setup steps and profiling output.                                   ##
##                                                                            ##
################################################################################

# Output profiling results (if enabled at top of file)
# zprof

# Report loaded modules (uncomment for debugging)
# echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"
