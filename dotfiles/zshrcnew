################################################################################
##                                                                            ##
##  ZSH                                                                       ##
##                                                                            ##
################################################################################

################################################################################
##                                                                            ##
##  Profiling (uncomment when needed)                                         ##
##                                                                            ##
##  See: https://stackoverflow.com/a/4351664/2103996                          ##
##                                                                            ##
################################################################################

###########################
#  Per-Command Profiling  #
###########################

# zmodload zsh/datetime
# setopt promptsubst
# PS4='+$EPOCHREALTIME %N:%i> '
# exec 3>&2 2> startlog.$$
# setopt xtrace prompt_subst

############################
#  Per-Function Profiling  #
############################

# zmodload zsh/zprof

################################################################################
##                                                                            ##
##  Global                                                                    ##
##                                                                            ##
################################################################################

# Create a hash table for globally stashing variables without polluting main
# scope with a bunch of identifiers.
typeset -A __BUELL

# For reporting on what modules are loaded.
typeset -a __ZSH_MODULES_LOADED

# Set our ZDOTDIR for storage of configurations, cache, etc.
export ZDOTDIR="${HOME}/.zsh"
mkdir -p "$ZDOTDIR"{config,cache}

# Ensure these arrays are unique (contain no duplicate values).
typeset -U path cdpath fpath manpath

# Navigation & Directory Stack
setopt autocd               # .. is shortcut for cd .. (etc)
setopt autoparamslash       # tab completing directory appends a slash
setopt autopushd            # cd automatically pushes old dir onto dir stack
setopt pushdignoredups      # don't push multiple copies of same dir onto stack
setopt pushdsilent          # don't print dir stack after pushing/popping

# File Operations
setopt clobber              # allow clobbering with >, no need to use >!
setopt nonomatch            # unmatched patterns are left unchanged

# History Operations
setopt histignorealldups    # filter duplicates from history
setopt histignorespace      # don't record commands starting with a space
setopt histverify           # confirm history expansion (!$, !!, !foo)
setopt sharehistory         # share history across shells
setopt EXTENDED_HISTORY     # save timestamps in history

# Input & Control
setopt noflowcontrol        # disable start (C-s) and stop (C-q) characters
setopt interactivecomments  # allow comments, even in interactive shells

# Disabled Options (uncomment to enable)
# setopt printexitvalue      # print exit status for non-zero exits
# setopt ignoreeof           # prevent accidental C-d from exiting shell
# setopt correct             # command auto-correction
# setopt correctall          # argument auto-correction

################################################################################
##                                                                            ##
##  Helpers                                                                   ##
##                                                                            ##
################################################################################

# PATH helpers
path_prepend() { [[ -d $1 ]] && path=($1 $path); }
path_append()  { [[ -d $1 ]] && path=($path $1); }

# Module reload management
reload_module() {
  emulate -L zsh
  local module=$1

  if [[ -z "$module" ]]; then
    echo "Usage: reload_module <module_name>"
    echo "Available modules:"
    ls "${ZDOTDIR}/config"/*.zsh | sed 's|.*/||; s|\.zsh$||'
    return 1
  fi

  local module_file="${ZDOTDIR}/config/${module}.zsh"
  if [[ ! -r "$module_file" ]]; then
    echo "Module '$module' not found"
    return 1
  fi

  # Clear the loaded flag to force reload
  unset "__BUELL[MODULES_LOADED_${module}]"

  # For modules with expensive initialization, clear those guards too
  case "$module" in
    *nvm*)
      unset "__BUELL[NVM_INITIALIZED]"
      ;;
  esac

  echo "Reloading module: $module"
  source "$module_file"
  __BUELL[MODULES_LOADED_${module}]=1
}

# Force reload on all modules
reload_all_modules() {
  emulate -L zsh
  echo "Reloading all modules..."

  # Clear all module guards
  for key in ${(k)__BUELL}; do
    if [[ "$key" =~ "^(MODULES_LOADED_|.*_INITIALIZED|KUBECTL_COMPLETION_LOADED)" ]]; then
      unset "__BUELL[$key]"
    fi
  done

  # Clear the tracking array
  __ZSH_MODULES_LOADED=()

  # Reload all modules
  for f in "${ZDOTDIR}"/config/*.zsh(N); do
    local module_name=${f:t:r}
    if [[ -r "$f" ]]; then
      echo "  Loading: $module_name"
      source "$f"
      __BUELL[MODULES_LOADED_${module_name}]=1
      __ZSH_MODULES_LOADED+=(${module_name})
    fi
  done
}

# Print debugging information for the config
zsh_debug() {
  echo "=== ZSH Configuration Debug ==="
  echo "ZDOTDIR: $ZDOTDIR"
  echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"
  echo "Guard variables:"
  for key in ${(ko)__BUELL}; do
    if [[ "$key" =~ "(LOADED|MODULE)" ]]; then
      echo "  $key = ${__BUELL[$key]}"
    fi
  done
}

################################################################################
##                                                                            ##
##  History                                                                   ##
##                                                                            ##
################################################################################

###################
#  Configuration  #
###################

export HISTSIZE=100000                 # Commands to keep in memory
export HISTFILE="${ZDOTDIR}/history"   # History file location
export SAVEHIST=$HISTSIZE              # Commands to save to file

########################
#  Search Enhancement  #
########################

# Enhanced history search that supports pattern matching
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end

# Key bindings for enhanced history search
bindkey "^P" history-beginning-search-backward-end          # Ctrl+P
bindkey "^N" history-beginning-search-forward-end           # Ctrl+N

# Pattern-based incremental search (supports patterns like a*b)
bindkey "^R" history-incremental-pattern-search-backward    # Ctrl+R
bindkey "^S" history-incremental-pattern-search-forward     # Ctrl+S

################################################################################
##                                                                            ##
##  Completions                                                               ##
##                                                                            ##
################################################################################

###################
#  Configuration  #
###################

# Prepend our custom completions to fpath
fpath=(~/.zsh/completions $fpath)

# Enable menu selection interface for completions
zstyle ':completion:*' menu select

# Fall through to cd if cdr is passed a non-recent dir as an argument
zstyle ':chpwd:*' recent-dirs-default true

# Use colors in completions (matches ls colors)
zstyle ':completion:*' list-colors ''

# Group completions by type/source
zstyle ':completion:*' group-name ''

# Configure completion matching rules
#   `'m:{[:lower:][:upper:]}={[:upper:][:lower:]}'`: Case-insensitive matching
#   `'r:|[._-]=* r:|=*'`: Allow matching w or wo separators (ie. f.b -> foo.bar)
#   `'l:|=* r:|=*'`: Enable substring matching (ie. bar -> foobar)
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'

# Keep cdpath functional but don't show in autocompletions
# This prioritizes local directories over cdpath entries
zstyle ':completion:*:complete:(cd|pushd):*' tag-order \
  'local-directories named-directories'

###############################
#  Tool-Specific Completions  #
###############################

# Docker (allow stacking Docker options like -it)
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# Kubectl (load kubectl completions if available)
if command -v kubectl &> /dev/null && [[ -z "${__BUELL[KUBECTL_COMPLETION_LOADED]:-}" ]]; then
  source <(kubectl completion zsh)
  __BUELL[KUBECTL_COMPLETION_LOADED]=1
fi

###########################
#  Initialize Completion  #
###########################

# Autoload compinit
autoload -Uz compinit

# Use cached zcompdump file, refreshing if configs change
if [[ ! -f "${ZDOTDIR}/cache/zcompdump" || "$HOME/.zshrc" -nt "${ZDOTDIR}/cache/zcompdump" ]]; then
  compinit -d "${ZDOTDIR}/cache/zcompdump"
else
  compinit -C -d "${ZDOTDIR}/cache/zcompdump"
fi

################################################################################
##                                                                            ##
##  Modules                                                                   ##
##                                                                            ##
################################################################################

# reload_module 02-color           # Reload a specific module
# reload_module 99-nvm             # Reload NVM module (clears NVM_LOADED guard)
# reload_all_modules               # Reload everything
#
# echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"  # List loaded modules
# print -l ${(kv)__BUELL}                                # See what's in __BUELL

# Load all modules from the configuration path
for f in "${ZDOTDIR}"/config/*.zsh(N); do
  local module_name=${f:t:r}

  if [[ -z "${__BUELL[MODULES_LOADED_${module_name}]:-}" ]]; then
    if [[ -r "$f" ]]; then
      source "$f"
      __BUELL[MODULES_LOADED_${module_name}]=1
      __ZSH_MODULES_LOADED+=(${module_name})
    else
      echo "Warning: Cannot read $f" >&2
    fi
  fi
done

################################################################################
##                                                                            ##
##  Finalization                                                              ##
##                                                                            ##
##  Final setup steps and profiling output.                                   ##
##                                                                            ##
################################################################################

# Output profiling results (if enabled at top of file)
# zprof

# Report loaded modules (uncomment for debugging)
# echo "Loaded modules: ${(j:, :)__ZSH_MODULES_LOADED}"
