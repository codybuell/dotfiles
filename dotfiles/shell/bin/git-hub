#!/usr/bin/env ruby

require 'json'
require 'shellwords'
require 'tmpdir'

# Grabs the next command line argument, aborting if there is none.
def arg
  ARGV.shift.tap do |arg|
    if arg.nil?
      die 'expected an argument; got none'
    end
  end
end

# Returns the name of the currently checked-out branch.
def current_branch
  capture('git rev-parse --abbrev-ref HEAD')
end

# Returns the number of the PR corresponding to the currently checked-out
# branch, or `nil` if the current branch doesn't follow the "pull/N" format.
def current_pr
  current_branch[%r{\Apull/(\d+)\z}, 1]
end

# Prints `msg` and aborts the program.
def die(msg)
  puts "error: #{msg}"
  exit 1
end

# Returns the URL for the contents of the specified PR as a patch.
def pr(number)
  "https://github.com/#{project}/pull/#{number}.patch"
end

# Preferred remotes, in priority order.
PREFERRED_REMOTES = %w[
  upstream
  github
  origin
]
MAX_INT = 1 << (1.size * 8 - 2) - 1

def capture(command)
  result = `#{command}`.chomp
  check(command)
  result
end

def remote_config
  capture('git remote -v')
    .split(/\n/)
    .grep(/\A(#{PREFERRED_REMOTES.join('|')})\s/)
    .grep(/github\.com/)
    .grep(/fetch/)
    .sort { |a, b|
      PREFERRED_REMOTES.find_index(a) || MAX_INT <=>
      PREFERRED_REMOTES.find_index(b) || MAX_INT
    }
    .first or die 'failed to locate GitHub remote'
end

def remote
  remote_config[%r{^(\w+)\s+\S*github\.com\S+\s+\(fetch\)}, 1]
end

# Infers the GitHub project name (ie. "user/project") from the repo remotes.
def project
  remote_config[%r{github\.com[:/]([^ ]+?)(\.git)? \(fetch\)}, 1]
end

def link(pull)
  base = "https://github.com/#{project}/"
  current = pull || current_pr
  base + (current.nil? ? 'pulls' : "pull/#{Integer(current)}")
end

# Run `command` using `system()`, aborting the script if it returns a non-zero
# exit code.
def run(command)
  system(command)
  check(command)
end

def check(command)
  status = $?.exitstatus
  if !status.zero?
    die "command (#{command}) failed with non-zero exit status (#{status})"
  end
end

# Prints usage information.
def usage
  puts <<-END.gsub(/^ {4}/, '')
    Usage:
      git hub get <pr>        [fetch a PR to a local branch]
      git hub link [pr]       [show web URL for PR]
      git hub ls              [list open PRs]
      git hub merge [pr]      [merge a PR]
      git hub open [pr]       [open web URL for PR]
      git hub show [pr]       [show a PR on standard out]
      git hub update          [pull in new commits from current PR]
  END
end

if ARGV.length.zero?
  usage
  exit
end

case ARGV.shift

when 'get'
  number = arg
  url = Shellwords.shellescape(pr(number))
  Dir.mktmpdir do |dir|
    branch = "pull/#{Shellwords.shellescape(number)}"
    run "git fetch #{remote} pull/#{Shellwords.shellescape(number)}/head:#{branch}"
    run "git checkout #{branch}"
  end

when 'update'
  number = current_pr
  if number.nil?
    die "can't infer PR number from current branch"
  end
  url = Shellwords.shellescape(pr(number))
  Dir.mktmpdir do |dir|
    run "curl -L -f -o #{dir}/PULL -s #{url}"
    system "git am #{dir}/PULL"
    while !$?.exitstatus.zero?
      print 'Attempt to apply failed; run `git am --skip`? [y/n] '
      if gets.downcase.chomp === 'y'
        system 'git am --skip'
      else
        run 'git am --abort'
        break
      end
    end
  end

when 'link'
  pull = ARGV.shift
  puts link(pull)

when 'open'
  pull = ARGV.shift
  run "open #{link(pull)}"

when 'ls'
  url = Shellwords.shellescape("https://api.github.com/repos/#{project}/pulls")
  JSON[%x{curl -L -s -f #{url}}].map do |pull|
    puts "#{pull['number']}: #{pull['title']}"
  end

when 'merge'
  pull = ARGV.shift
  current = current_pr
  # If no explicit PR specified, assume we want to merge current PR to master.
  if pull.nil?
    if current.nil?
      die "no explicit PR number provided, and can't infer from current branch"
    end
    pull = current
    target = capture("git config branch.#{current_branch}.merge")
    target = capture("git rev-parse --abbrev-ref #{target}")
    run "git checkout #{target}"
  else
    # Explicit PR provided
    if current_branch == "pull/#{pull}"
      die "can't merge `#{current_branch}` into `#{current_branch}`"
    end
  end
  message = Shellwords.shellescape(
    <<-END.gsub(/^ {6}/, '')
      Merge branch 'pull/#{pull}'

      Closes: https://github.com/#{project}/pull/#{pull}
    END
  )
  run "git merge --log -m #{message} --no-ff pull/#{pull}"

when 'show'
  number = ARGV.shift || current_pr
  if number.nil?
    die "no explicit PR number provided, and can't infer from current branch"
  end
  url = Shellwords.shellescape(pr(number))
  system "curl -L -f #{url}"

else
  usage
end

if ARGV.length > 0
  puts "warning: excess arguments (#{ARGV.inspect}) ignored"
end
