#
# function
#

# toggle alacritty configs
function big() {
  sed -i 's/\(^  size: \)\(.*$\)/\124/' ~/.alacritty.yml
}
function small() {
  sed -i 's/\(^  size: \)\(.*$\)/\113.5/' ~/.alacritty.yml
}

# test regular expressions, ctrl-D to stop
# testregex 'string to match against'
# > enter a regex and match will be returned
function testregex() {
  [ "$#" -eq 1 ] || return 1
  while IFS= read -r line; do
    printf '%s\n' "$1" | grep -Eoe "$line"
  done
}

# testing with minimal vimrc, devim [path to package]
function devim() {
  VIMDEVPATH=$1 vim -Nu ~/.devimrc.vim
}

# search up for ~/.gopath and set GOPATH to its parent dir
function gopath() {
  cdir=$PWD
  while [ "$cdir" != "/" ]; do
    if [ -f "$cdir/.gopath" ]; then
      export GOPATH=$cdir
      break
    fi
    cdir=$(dirname "$cdir")
    if [ "$cdir" == "/" ]; then
      export GOPATH=$DEFGOP
    fi
  done
}

# # override cd to dynamically set paths
# cd() {
#   # perform the actual cd without risk of recursion (builtin)
#   builtin cd "$@"
#
#   # gopath (search up for ~/.gopath and set GOPATH to its parent dir)
#   gopath
# }

# aws
ec2ls() {
  aws ec2 describe-instances --query \
  "Reservations[*].Instances[*].{Name:Tags[?Key=='Name']|[0].Value,Status:State.Name,ID:InstanceId,AZ:Placement.AvailabilityZone,Key:KeyName,Type:InstanceType,Launched:LaunchTime}" \
  --output table
}

# markdown shortcut
md() {

  target=README.md

  HIERARCHY=(
    'README.md' \
    'readme.md' \
    'README.txt' \
    'readme.txt' \
    'README' \
    'readme' \
  )

  unset i

  for i in ${HIERARCHY[@]}; do
    if [[ -a $i ]]; then
      target=$i
      break
    fi
  done

  echo $target

  vi $target

}

# tpam to clipboard
tpam() {
  TPPASSWD={{ TPAMPassword }}
  get-tpam.py -d {{ TPAMUrl }} -u {{ TPAMUsername }} -p $TPPASSWD
}

# xfreedesktop/rdesktop wrapper (usage: rdp user@domain host)
rdp() {

  RDP_CLIENT='rdesktop'
  RDP_USER=`echo $1 | sed 's/\@.*$//'`
  RDP_DOMAIN=`echo $1 | sed 's/^.*\@//;s/\..*$//'`
  RDP_HOST=$2
  RDP_GEOMETRY='1920x1300'

  case $RDP_CLIENT in
    rdesktop )
      # -D removes the window decorations for the session, no more menu bar taking up space
      # -K lets you pass shortcuts back to the primary host, so you can switch workspaces
      # -b use bitmaps, slower to start but better visually
      # -P cache the bitmaps to reduce network traffic and improve performance
      # -g your screens res, minus the os menu bar...
      # -a your bit depth
      # -p '-' to prompt for password
      rdesktop -DKbP -g ${RDP_GEOMETRY} -a 24 -d ${RDP_DOMAIN} -u ${RDP_USER} -p - ${RDP_HOST}
      ;;
    xfreerdp )
      # -K try not to mangle host os keyboard bindings
      # -z compression
      # -g set a geometry
      # --plugin cliprdr allow clipboard sharing
      # -x 0x80 font smoothing over lan connection
      xfreerdp -K --plugin cliprdr -x 0x80 -g ${RDP_GEOMETRY} -u ${RDP_USER} -d ${RDP_DOMAIN} ${RDP_HOST}:3389
      ;;
  esac
}

# change directory, used with aliases
changedir() {
  eval cd $1/$2
}

gist() {
  changedir '{{ Gists }}' $@
}

repo() {
  if [ $1 ]; then
    REPOLIST=$(cat {{ Repos }}/.repos | awk -F: '{print $2}')
    TARGETREPO=$(echo $REPOLIST | grep "/${1}$")
    cd $TARGETREPO
    #changedir '{{ Repos }}' $@
  else
    cd {{ Repos }}
  fi
}

project() {
  changedir '{{ Projects }}' $@
}

# change directory or edit, used with aliases
changediroredit() {
  if [ $2 ]; then
    eval vi $1/$2
  else
    eval cd $1
  fi
}

# edit or cd to notes
note() {
  if [ $1 ]; then
    ARGEXT=`echo $1 | sed -n 's/^.*\.\(.*$\)/\1/p'`
    EXT=`[[ ${#ARGEXT} -eq 0 ]] && echo '.txt'`
    vim {{ Notes }}/${1}${EXT}
  else
    cd {{ Notes }}
  fi
}

# edit or cd to codex
codex() {
  if [ $1 ]; then
    ARGEXT=`echo $1 | sed -n 's/^.*\.\(.*$\)/\1/p'`
    EXT=`[[ ${#ARGEXT} -eq 0 ]] && echo '.txt'`
    vim {{ Codex }}/${1}${EXT}
  else
    cd {{ Codex }}
  fi
}

# todo-txt.sh wrapper
function t() {
  ARGNUM=$#
  if [ $ARGNUM == 0 ] || [ $ARGNUM == 1 -a $1 == "mit" ]; then
    clear
  fi
  todo.sh $@
}

# ersh wrapper for ansible
function Ersh() {
  GROUP=$1
  shift
  ansible $GROUP --sudo -m shell -a "$@"
}

# ersync wrapper for ansible
function Ersync() {
  ansible $1 --sudo -o -m copy -a "src=$2 dest=$3"
}

# ping range of ips: pingsweep 10.10.1 1..50
function pingsweep() {
  #trap "exit" INT
  for i in $(eval echo "{$2}"); do
    ping -noq -c 1 -t 1 -i 0.1 ${1}.${i} > /dev/null
    echo -e "${1}.${i}\t`[[ $? == 0 ]] && echo up || echo down`"
  done
}

# cd up till you reach the project root dir (git)
function root() {
  GOTO="./"
  CLOC=`pwd | sed 's/[^\/]//g'`
  EXST='false'
  for ((i=1; i<=${#CLOC}; i++)); do
    [[ ! -d ${GOTO}.git ]] && {
      GOTO+="../"
    } || {
      EXST='true'
      break
    }
  done
  [[ $EXST == 'true' ]] && {
    cd $GOTO
  } || {
    echo 'cwd is not part of a repository'
  }
}

# git push origin [branch]
function gpo() {
  [[ -z $1 ]] && {
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
  } || {
    BRANCH=$1
  }
  git push origin $BRANCH
}

# git push current branch
function gpb() {
  CURRENT=$(git rev-parse --abbrev-ref HEAD)
  git push --progress origin $CURRENT 2>&1 | tee /tmp/lastgitpush
  MRLINK=$(awk '/To create a merge request/{getline;print $2}' /tmp/lastgitpush)
  if [[ ! -z "$MRLINK" ]]; then
    open $MRLINK
  fi
}

# git clone to folder structure $Repos/site/userORgroup/userORgroupN/repo
function gcl() {
  CLONEPATH=`echo $1 | sed -E 's/git\@|http(s)?:\/\///;s/\.git$//;s/:/\//g'`
  git clone $1 {{ Repos }}/$CLONEPATH
  cd {{ Repos }}/$CLONEPATH
  repo_profiler
}

# git commit retry, if a commit fails use the last git commit message
function gcr() {
  OLDCOMMITMESSAGE=`cat "$(git rev-parse --git-dir)/COMMIT_EDITMSG" | sed '/^#.*$/d;${/^$/d}' | perl -p -e 'chomp if eof'`
  echo $OLDCOMMITMESSAGE
  echo
  case `basename $SHELL` in
    zsh )
      read "selection?Retry commit with this message (y[es]/n[o]): "
      ;;
    * )
      read -r -p "Retry commit with this message (y[es]/n[o]): " selection
      ;;
  esac
  case $selection in
    [yY][eE][sS]|[yY] )
      echo -n $OLDCOMMITMESSAGE | git commit -F - -e
      #cat "$(git rev-parse --git-dir)/COMMIT_EDITMSG" | sed '/^#.*$/d' | perl -p -e 'chomp if eof' | git commit -F - -e
      ;;
    [nN][oO]|[nN] )
      ;;
  esac
}

# git pull origin [branch]
function gpl() {
  [[ -z $1 ]] && {
    BRANCH=$(git rev-parse --abbrev-ref HEAD)
  } || {
    BRANCH=$1
  }
  git pull origin $BRANCH
}

# edit journal
function j() {
  cd {{ Journal }}
  [[ ! -d {{ Journal }}/`date +%Y/%m` ]] && mkdir -p {{ Journal }}/`date +%Y/%m`
  vim {{ Journal }}/`date +%Y/%m/%Y.%m.%d`.txt
  cd - > /dev/null 2>&1
}

# get internal ip address
function intip() {
  [[ -f /etc/redhat-release ]] && {
    ifconfig $(netstat -rn | grep UG | awk '{print $8}') | grep inet | egrep -v '::|inet 127.' | awk '{print $2}'
  } || {
    ifconfig $(netstat -rn -f inet | grep default | awk '{print $6}') | grep inet | egrep -v '::|inet 127.' | awk '{print $2}'
  }
}

# fwknop helper
function nok() {
  TARGETPORT=${3:-22}
  case $1 in
    int )
      SRCIP=`intip`
      ;;
    ext )
      SRCIP=`extip`
      ;;
  esac
  fwknop -A tcp/22 -a $SRCIP -D $2

  case `basename $SHELL` in
    zsh )
      read "choice?connect to host? [y/n] "
      ;;
    * )
      read -p "connect to host? [y/n] " choice
      ;;
  esac

  case "$choice" in
    n|N|no ) return;;
  esac

  # fix ssh-agent issue
  if [ ! -z $TMUX ] && [ "$(uname)" = "Darwin" ]; then
    TERM=xterm-256color reattach-to-user-namespace ssh -p $TARGETPORT $2
  else
    ssh -p $TARGETPORT $2
  fi
}

# build completion function wrapper
#
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# usage:
#
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get _apt_get_install apt-get install
#   complete -F _apt_get_install agi
#   # `agi <tab><tab>` will now auto complete
#   # not necessary if alias remaps a single command like `alias ag='apt-get'`
#   # in which case `complete -F _apt_get ag` would be sufficient
function make-completion-wrapper () {
  local function_name="$2"
  local arg_count=$(($#-3))
  local comp_function_name="$1"
  shift 2
  local function="
function $function_name {
  ((COMP_CWORD+=$arg_count))
  COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
  "$comp_function_name"
  return 0
}"
  eval "$function"
# echo $function_name
# echo "$function"
}

# tmux
function tmux() {
  # make sure even pre-existing tmux sessions use the latest ssh_auth_sock
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # if provided with args, pass them through
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux -u "$@"
    return
  fi

  # check for .tmux file (poor man's tmuxinator)
  if [[ -e .tmux && -f .tmux ]]; then
    if [[ ! -x .tmux ]]; then
      chmod 755 .tmux
    fi
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha512 .tmux)"
    if ! grep -q "$DIGEST" ~/.tmux.digests 2> /dev/null; then
      cat .tmux
      echo -n "Trust (and run) this .tmux file? (t = trust, otherwise = skip): "
      read REPLY
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/.tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # attach to existing session, or create one, based on current directory.
  SESSION_NAME=$([[ `pwd` == $HOME ]] && echo 'HOME' || basename "$(pwd)" | sed 's/\.//g' | tr '[:upper:]' '[:lower:]')
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux -u new -A -s "$SESSION_NAME"
}

## email controller
#function control() {
#  if [ -z "$TMUX" ]; then
#    if ! tmux has-session -t control 2> /dev/null; then
#      cd ~
#      # build home window
#      tmux new-session -d -s control -n control -c ~/.mutt -x `tput cols` -y `tput lines`
#      tmux set-window-option -t control:control automatic-rename off
#      tmux set-window-option -t control:control monitor-activity off
#      tmux split-window -t control:control -h -p 66 -c ~/.mutt
#      tmux split-window -t control:control -h -p 50 -c ~/.mutt
#      tmux split-window -t control:control -v -l 7 -f -c ~/.mutt
#      tmux send-keys -t control:control.1 '~/.mutt/scripts/control.sh home' Enter
#      tmux send-keys -t control:control.2 '~/.mutt/scripts/control.sh work' Enter
#      #tmux send-keys -t control:control.3 '~/.mutt/scripts/control.sh stratus' Enter
#      tmux send-keys -t control:control.4 '~/.mutt/scripts/control.sh' Enter
#      # attach to home session, home window, weechat pane
#      tmux -u attach -t control:control.4
#    else
#      tmux -u attach -t control:control.4
#    fi
#  else
#    tmux switch-client -t control:control.4
#  fi
#}

# home tmux
# .--------------------------------------.
# |                  |                   |
# |         1        |                   |
# |                  |                   |
# |------------------|         3         |
# |                  |                   |
# |         2        |                   |
# |                  |                   |
# |                  |                   |
# '--------------------------------------'
function home() {
  if [ -z "$TMUX" ]; then
    if ! tmux has-session -t HOME 2> /dev/null; then
      cd ~
      # build home window
      tmux new-session -d -s HOME -n home -x `tput cols` -y `tput lines`
      tmux set-window-option -t HOME:home automatic-rename off

      #--- layout 1 (left primary workspace)
#     tmux split-window -t HOME:home -h -p 45 -c ~/
#     tmux split-window -t HOME:home.1 -v -p 60 -c ~/
#     tmux send-keys -t HOME:home.1 'cd ~/Downloads; mutt' Enter
#     tmux send-keys -t HOME:home.2 'cd ~/Desktop; wj' Enter
#     tmux send-keys -t HOME:home.3 'cd ~/Desktop; vi -c ":so ~/.config/nvim/sessions/home"' Enter

      #--- layout 2 (right primary workspace)
#     tmux split-window -t HOME:home -h -p 66 -c ~/
#     tmux split-window -t HOME:home -b -v -p 40 -c ~/
#     tmux send-keys -t HOME:home.1 'cd ~/Desktop; vi -c ":so ~/.vim/sessions/home"' Enter
#     tmux send-keys -t HOME:home.2 'cd ~/Downloads; mutt' Enter
#     tmux send-keys -t HOME:home.3 'cd ~/Desktop; wj' Enter

      #--- layout 3 (top full width)
      tmux split-window -t HOME:home -v -p 60 -c ~/
      tmux split-window -t HOME:home.2 -h -p 45 -c ~/
      tmux send-keys -t HOME:home.1 'cd ~/Downloads && mutt' Enter
      tmux send-keys -t HOME:home.2 'cd ~/Desktop; vi -c ":so ~/.config/nvim/sessions/home"' Enter
      tmux send-keys -t HOME:home.3 'cd ~/Desktop && clear' Enter

      # # build notes/journal window
      # tmux new-window -t HOME: -c ~/.mutt -n notes
      # tmux send-keys -t HOME:notes.1 'wj' Enter

      # build control window
      tmux new-window -t HOME: -c ~/.mutt -n control
      tmux set-window-option -t HOME:control automatic-rename off
      tmux set-window-option -t HOME:control monitor-activity off
      tmux split-window -t HOME:control -h -p 66 -c ~/.mutt
      tmux split-window -t HOME:control -h -p 50 -c ~/.mutt
      tmux split-window -t HOME:control -v -l 7 -f -c ~/.mutt
      tmux send-keys -t HOME:control.1 '~/.mutt/scripts/control.sh home' Enter
      tmux send-keys -t HOME:control.2 '~/.mutt/scripts/control.sh work' Enter
#     tmux send-keys -t HOME:control.3 '~/.mutt/scripts/control.sh client' Enter
      tmux send-keys -t HOME:control.4 '~/.mutt/scripts/control.sh' Enter

      ## attach to home session, home window, weechat pane
      tmux -u attach -t HOME:home.3
    else
      tmux -u attach -t HOME
    fi
  else
    tmux switch-client -t HOME
  fi
}

# repocheck
function repocheck() {

  # get the current working directory
  CWD=$(pwd)

  # move into the repos root
  cd {{ Repos }}

  # build an array of all git repos found
  REPOS=($(find . -type d -name .git | sed 's/\.git$//'))

  # print out some column headers
  echo "REPOSITORY LOCAL REMOTE" | awk '{printf "%-80s %s %s\n", $1, $2, $3}'

  # loop through all repos in Repos path
  for i in ${REPOS[@]}; do
    cd {{ Repos }}/$i > /dev/null 2>&1
    git status > /dev/null 2>&1
    if [ $? -gt 0 ]; then
      printf "$i \033[1;30mnot~a~repo\033[0;m" | \
      awk '{printf "%-80s %s\n", $1, $2}' | \
      sed "s/ /./g;s/\([[:alnum:]]\)\.\./\1 \./;s/\.\.\([^\.]\)/\. \1/;s/~/ /g"
      continue
    else
      LSTAT=$([ `git status --porcelain | wc -l` -gt 0 ] && printf "\033[0;31mdirty\033[0;m" || printf "\033[0;32mclean\033[0;m")
      if [ `git remote -v | wc -l` -lt 1 ]; then
        RSTAT=$(printf "\033[1;30morphaned\033[0;m")
      else
        git fetch > /dev/null 2>&1
        LOCAL=$(git rev-parse @ 2> /dev/null)
        git rev-parse @{u} > /dev/null 2>&1
        if [ $? -gt 0 ]; then
          git branch --set-upstream-to=origin/master master > /dev/null 2>&1
        fi
        REMOTE=$(git rev-parse @{u} 2> /dev/null)
        BASE=$(git merge-base @ @{u} 2> /dev/null)
        if [ "ZZ$LOCAL" = "ZZ$REMOTE" ]; then
          RSTAT=$(printf "\033[0;32mcurrent\033[0;m")
        elif [ "ZZ$LOCAL" = "ZZ$BASE" ]; then
          RSTAT=$(printf "\033[0;31mbehind\033[0;m")
        elif [ $REMOTE = $BASE ]; then
          RSTAT=$(printf "\033[1;33mahead\033[0;m")
        else
          RSTAT=$(printf "\033[0;33mdiverged\033[0;m")
        fi
      fi
      echo "$i $LSTAT~$RSTAT" | awk '{printf "%-80s %s\n", $1, $2}' | sed "s/ /./g;s/\([[:alnum:]]\)\.\./\1 \./;s/\.\.\([^\.]\)/\. \1/;s/~/ /"
    fi
  done

  # drop back into the working dir
  cd $CWD

}

# bounce the dock icon, if iterm does not have focus
function bounce() {
  if [ -n "$TMUX" ]; then
    print -Pn "\ePtmux;\e\e]1337;RequestAttention=1\a\e\\"
  else
    print -Pn "\e]1337;RequestAttention=1\a"
  fi
}

# fd - "find directory"
# from: https://github.com/junegunn/fzf/wiki/examples#changing-directory
function fd() {
  local DIR
  DIR=$(bfs ${1:-.} -type d -nohidden 2> /dev/null | fzf +m) && cd "$DIR"
}

# fda -"find directory all, including hidden directories"
function fda() {
  local DIR
  DIR=$(bfs ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$DIR"
}

# fh - "find [in] history"
# From: https://github.com/junegunn/fzf/wiki/examples#command-history
function fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

function history() {
  emulate -L zsh

  # this is a function because Zsh aliases can't take arguments
  local DEFAULT=-1000
  builtin history ${1:-$DEFAULT}
}

function mosh() {
  emulate -L zsh

  if [[ -z "$@" ]]; then
    # common case: getting to my workstation
    command mosh -6 sandbox
  else
    command mosh "$@"
  fi
}

# regmv = regex + mv (mv with regex parameter specification)
# example: regmv '/\.tif$/.tiff/' *
#   replaces .tif with .tiff for all files in current dir
#   must quote the regex otherwise "\." becomes "."
# limitations: ? doesn't seem to work in the regex, nor *
regmv() {
  if [ $# -lt 2 ]; then
    echo "  Usage: regmv 'regex' file(s)"
    echo "  Where:       'regex' should be of the format '/find/replace/'"
    echo "Example: regmv '/\.tif\$/.tiff/' *"
    echo "   Note: Must quote/escape the regex otherwise \"\.\" becomes \".\""
    return 1
  fi
  regex="$1"
  shift
  while [ -n "$1" ]
  do
    newname=$(echo "$1" | sed "s${regex}g")
    if [ "${newname}" != "$1" ]; then
      mv -i -v "$1" "$newname"
    fi
    shift
  done
}

## convenience function for jumping to hashed directory aliases (ie. `j rn` -> `jump rn` -> `cd ~rn`)
#function jump() {
#  emulate -L zsh
#
#  if [ $# -eq 0 ]; then
#    cd -
#  elif [ $# -gt 1 ]; then
#    echo "jump: single argument required, got $#"
#    return 1
#  else
#    if [ $(hash -d|cut -d= -f1|grep -c "^$1\$") = 0 ]; then
#      # Not in `hash -d`: assume it's just a dir.
#      cd $1
#    else
#      cd ~$1
#    fi
#  fi
#}
#
#function _jump_complete() {
#  emulate -L zsh
#  local word completions
#  word="$1"
#  completions="$(hash -d|cut -d= -f1)"
#  reply=( "${(ps:\n:)completions}" )
#}
#
## Complete filenames and `hash -d` entries.
#compctl -f -K _jump_complete jump
