#
# complete
#
#
# Options for creating auto completions:
#
#   1. Use existing autocompletion function
#
#    # get copletion func with `complete -p [function to mirror]`
#    # complete -o [options from func] -F [_existing func] [your command]
#    complete -o nospace -F _cd myfuncoralias
#
#  2. Use completio wrapper function
#
#    #make-completion-wrapper <actual completion function> <name of new func.>
#                             <command name> <list supplied arguments>
#    # complete [-o func options] -F <name of new func> <alias or func to wrap>
#    make-completion-wrapper _cd _gotorepo cd ~/Repos/
#    complete -o nospace -F _gotorepo repo
#
#  3. Roll your own
#
#    COMPREPLY: array containing possible completions as a result of your func
#    COMP_WORDS: an array containing individual command arguments typed so far
#    COMP_CWORD: command argument index containing the current cursor position
#    COMP_LINE: the current command line
#
#    Use compgen to build completion list:
#      compgen -W "list of options sep by spaces" -- [string to match against]

# ws alias completion
_gotows() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "`eval ls '{{ NonRepoProjects }}'`" -- $cur) )
}
complete -F _gotows ws

# gist alias completion
_gotogist() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "`eval ls '{{ GistsPath }}'`" -- $cur) )
}
complete -F _gotogist gist

# repo alias completion
_gotorepos() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "`eval ls '{{ ReposPath }}'`" -- $cur) )
}
complete -F _gotorepos repo

# note alias completion
_gotoeditnotes() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "`eval ls '{{ NotesFolder }}'`" -- $cur) )
}
complete -F _gotoeditnotes note

# codex alias completion
_gotoeditcodex() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  COMPREPLY=( $(compgen -W "`eval ls '{{ CodexFolder }}'`" -- $cur) )
}
complete -F _gotoeditcodex codex

# todo-txt completion
_todotxtcli() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local pre=${COMP_WORDS[COMP_CWORD-1]}
  local cst="${COMP_WORDS[COMP_CWORD-2]}_${COMP_WORDS[COMP_CWORD-1]}"
  case $pre in
    mit )
      COMPREPLY=( $(compgen -W "today tomorrow monday tuesday wednesday thursday friday saturday sunday january february march april may june july august september october november december" -- $cur) )
      ;;
    * )
      if [[ $cst =~ ^mv_[0-9]+$ ]]; then
        COMPREPLY=( $(compgen -W "today tomorrow monday tuesday wednesday thursday friday saturday sunday january february march april may june july august september october november december" -- $cur) )
      else
        COMPREPLY=( $(compgen -W "mit `eval todo.sh lsprj` `eval todo.sh lsc`" -- $cur) )
      fi
      ;;
  esac
}
complete -F _todotxtcli t

# color function completion
_colorcomplete() {
  local cur=${COMP_WORDS[COMP_CWORD]}
  local pre=${COMP_WORDS[COMP_CWORD-1]}
  case $pre in
    set|-s )
      COMPREPLY=( $(compgen -W "`ls ~/.shell/base16-shell/scripts | sed 's/^base16-//;s/.sh$//'`" -- $cur) )
      ;;
    * )
      COMPREPLY=( $(compgen -W "help show sample set `ls ~/.shell/base16-shell/scripts | sed 's/^base16-//;s/.sh$//'`" -- $cur) )
      ;;
  esac
}
complete -F _colorcomplete color

# vault completion
function _vault_mounts() {
  (
    set -euo pipefail
    if ! vault mounts 2> /dev/null | awk 'NR > 1 {print $1}'; then
      echo "secret"
    fi
  )
}
function _vault() {
  local VAULT_COMMANDS=$(vault 2>&1 | egrep '^ +' | awk '{print $1}')

  local cur
  local prev

  if [ $COMP_CWORD -gt 0 ]; then
    cur=${COMP_WORDS[COMP_CWORD]}
    prev=${COMP_WORDS[COMP_CWORD-1]}
  fi

  local line=${COMP_LINE}

  if [[ $prev =~ ^(policies|policy-write|policy-delete) ]]; then
    local policies=$(vault policies 2> /dev/null)
    COMPREPLY=($(compgen -W "$policies" -- $cur))
  elif [ "$(echo $line | wc -w)" -le 2 ]; then
    if [[ "$line" =~ ^vault\ (read|write|delete|list)\ $ ]]; then
      COMPREPLY=($(compgen -W "$(_vault_mounts)" -- ''))
    else
      COMPREPLY=($(compgen -W "$VAULT_COMMANDS" -- $cur))
    fi
  elif [[ "$line" =~ ^vault\ (read|write|delete|list)\ (.*)$ ]]; then
    path=${BASH_REMATCH[2]}
    if [[ "$path" =~ ^([^ ]+)/([^ /]*)$ ]]; then
      list=$(vault list -format=yaml ${BASH_REMATCH[1]} 2> /dev/null | awk '{ print $2 }')
      COMPREPLY=($(compgen -W "$list" -P "${BASH_REMATCH[1]}/" -- ${BASH_REMATCH[2]}))
    else
      COMPREPLY=($(compgen -W "$(_vault_mounts)" -- $path))
    fi
  fi
}
complete -o default -o nospace -F _vault vault
