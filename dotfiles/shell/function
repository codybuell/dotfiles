#
# function
#

# change directory, used with aliases
changedir() {
  eval cd $1/$2
}

# change directory or edit, used with aliases
changediroredit() {
  [[ $2 ]] && eval vi $1/$2 || eval cd $1
}

# todo-txt.sh wrapper
function t() {
  ARGNUM=$#
  if [ $ARGNUM == 0 ] || [ $ARGNUM == 1 -a $1 == "mit" ]; then
    clear
  fi
  todo.sh $@
}

# ersh wrapper for ansible
function Ersh() {
  GROUP=$1
  shift
  ansible $GROUP --sudo -m shell -a "$@"
}

# ersync wrapper for ansible
function Ersync() {
  ansible $1 --sudo -o -m copy -a "src=$2 dest=$3"
}

# ping range of ips: pingsweep 10.10.1 1..50
function pingsweep() {
  #trap "exit" INT
  for i in $(eval echo "{$2}"); do 
    ping -noq -c 1 -t 1 -i 0.1 ${1}.${i} > /dev/null
    echo -e "${1}.${i}\t`[[ $? == 0 ]] && echo up || echo down`"
  done
}

# cd up till you reach the project root dir (git)
function root() {
  GOTO="./"
  CLOC=`pwd | sed 's/[^\/]//g'`
  EXST='false'
  for ((i=1; i<=${#CLOC}; i++)); do
    [[ ! -d ${GOTO}.git ]] && {
      GOTO+="../"
    } || {
      EXST='true'
      break
    }
  done
  [[ $EXST == 'true' ]] && {
    cd $GOTO
  } || {
    echo 'cwd is not part of a repository'
  }
}

# edit work journal
function wj() {
  [[ ! -d {{ WorkJournal }}/`date +%Y` ]] && mkdir -p {{ WorkJournal }}/`date +%Y`
  vim {{ WorkJournal }}/`date +%Y/%B`.txt
}

# edit personal journal
function pj() {
  [[ ! -d {{ PersonalJournal }}/`date +%Y` ]] && mkdir -p {{ PersonalJournal }}/`date +%Y`
  vim {{ PersonalJournal }}/`date +%Y/%B`.txt
}

# fwknop helper
function nop() {
  case $1 in
    int )
      SRCIP=`intip`
      ;;
    ext )
      SRCIP=`extip`
      ;;
  esac
  fwknop -A tcp/22 -a $SRCIP -D $2
  ssh $2
}

# build completion function wrapper
#
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# usage:
#
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get _apt_get_install apt-get install
#   complete -F _apt_get_install agi
#   # `agi <tab><tab>` will now auto complete
#   # not necessary if alias remaps a single command like `alias ag='apt-get'`
#   # in which case `complete -F _apt_get ag` would be sufficient
function make-completion-wrapper () {
  local function_name="$2"
  local arg_count=$(($#-3))
  local comp_function_name="$1"
  shift 2
  local function="
function $function_name {
  ((COMP_CWORD+=$arg_count))
  COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
  "$comp_function_name"
  return 0
}"
  eval "$function"
# echo $function_name
# echo "$function"
}
