#
# function
#

# change directory, used with aliases
changedir() {
  eval cd $1/$2
}

# change directory or edit, used with aliases
changediroredit() {
  [[ $2 ]] && eval vi $1/$2 || eval cd $1
}

# edit or cd to notes
note() {
  if [ $1 ]; then
    ARGEXT=`echo $1 | sed -n 's/^.*\.\(.*$\)/\1/p'`
    EXT=`[[ ${#ARGEXT} -eq 0 ]] && echo '.txt'`
    vim {{ NotesFolder }}/${1}${EXT}
  else
    cd {{ NotesFolder }}
  fi
}

# todo-txt.sh wrapper
function t() {
  ARGNUM=$#
  if [ $ARGNUM == 0 ] || [ $ARGNUM == 1 -a $1 == "mit" ]; then
    clear
  fi
  todo.sh $@
}

# ersh wrapper for ansible
function Ersh() {
  GROUP=$1
  shift
  ansible $GROUP --sudo -m shell -a "$@"
}

# ersync wrapper for ansible
function Ersync() {
  ansible $1 --sudo -o -m copy -a "src=$2 dest=$3"
}

# ping range of ips: pingsweep 10.10.1 1..50
function pingsweep() {
  #trap "exit" INT
  for i in $(eval echo "{$2}"); do 
    ping -noq -c 1 -t 1 -i 0.1 ${1}.${i} > /dev/null
    echo -e "${1}.${i}\t`[[ $? == 0 ]] && echo up || echo down`"
  done
}

# cd up till you reach the project root dir (git)
function root() {
  GOTO="./"
  CLOC=`pwd | sed 's/[^\/]//g'`
  EXST='false'
  for ((i=1; i<=${#CLOC}; i++)); do
    [[ ! -d ${GOTO}.git ]] && {
      GOTO+="../"
    } || {
      EXST='true'
      break
    }
  done
  [[ $EXST == 'true' ]] && {
    cd $GOTO
  } || {
    echo 'cwd is not part of a repository'
  }
}

# git push origin [branch]
function gpo() {
  [[ -z $1 ]] && {
    BRANCH='master'
  } || {
    BRANCH=$1
  }
  git push origin $BRANCH
}

# git pull origin [branch]
function gpl() {
  [[ -z $1 ]] && {
    BRANCH='master'
  } || {
    BRANCH=$1
  }
  git pull origin $BRANCH
}

# edit work journal
function wj() {
  [[ ! -d {{ WorkJournal }}/`date +%Y` ]] && mkdir -p {{ WorkJournal }}/`date +%Y`
  vim {{ WorkJournal }}/`date +%Y/%B`.txt
}

# edit personal journal
function pj() {
  [[ ! -d {{ PersonalJournal }}/`date +%Y` ]] && mkdir -p {{ PersonalJournal }}/`date +%Y`
  vim {{ PersonalJournal }}/`date +%Y/%B`.txt
}

# fwknop helper
function nok() {
  case $1 in
    int )
      SRCIP=`intip`
      ;;
    ext )
      SRCIP=`extip`
      ;;
  esac
  fwknop -A tcp/22 -a $SRCIP -D $2
  read -p "connect to host? [y/n] " choice
  case "$choice" in 
    n|N|no ) return;;
  esac

  # fix ssh-agent issue
  if [ ! -z $TMUX ]; then
    TERM=xterm-256color reattach-to-user-namespace ssh $2
  else
    ssh $2
  fi
}

# build completion function wrapper
#
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# usage:
#
#   alias agi='apt-get install'
#   make-completion-wrapper _apt_get _apt_get_install apt-get install
#   complete -F _apt_get_install agi
#   # `agi <tab><tab>` will now auto complete
#   # not necessary if alias remaps a single command like `alias ag='apt-get'`
#   # in which case `complete -F _apt_get ag` would be sufficient
function make-completion-wrapper () {
  local function_name="$2"
  local arg_count=$(($#-3))
  local comp_function_name="$1"
  shift 2
  local function="
function $function_name {
  ((COMP_CWORD+=$arg_count))
  COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
  "$comp_function_name"
  return 0
}"
  eval "$function"
# echo $function_name
# echo "$function"
}

# tmux
function tmux() {
  # make sure even pre-existing tmux sessions use the latest ssh_auth_sock
  local SOCK_SYMLINK=~/.ssh/ssh_auth_sock
  if [ -r "$SSH_AUTH_SOCK" -a ! -L "$SSH_AUTH_SOCK" ]; then
    ln -sf "$SSH_AUTH_SOCK" $SOCK_SYMLINK
  fi

  # if provided with args, pass them through
  if [[ -n "$@" ]]; then
    env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux "$@"
    return
  fi

  # check for .tmux file (poor man's tmuxinator)
  if [[ -e .tmux && -f .tmux ]]; then
    if [[ ! -x .tmux ]]; then
      chmod 755 .tmux
    fi
    # Prompt the first time we see a given .tmux file before running it.
    local DIGEST="$(openssl sha -sha512 .tmux)"
    if ! grep -q "$DIGEST" ~/.tmux.digests 2> /dev/null; then
      cat .tmux
      echo -n "Trust (and run) this .tmux file? (t = trust, otherwise = skip): "
      read REPLY
      if [[ $REPLY =~ ^[Tt]$ ]]; then
        echo "$DIGEST" >> ~/.tmux.digests
        ./.tmux
        return
      fi
    else
      ./.tmux
      return
    fi
  fi

  # attach to existing session, or create one, based on current directory.
  SESSION_NAME=$([[ `pwd` == $HOME ]] && echo 'home' || basename "$(pwd)" | sed 's/\.//g' | tr '[:upper:]' '[:lower:]')
  env SSH_AUTH_SOCK=$SOCK_SYMLINK tmux new -A -s "$SESSION_NAME"
}

# repocheck
function repocheck() {

  # git the current working directory
  CWD=$(pwd)

  # print out some column headers
  echo "REPOSITORY LOCAL REMOTE" | awk '{printf "%-50s %s %s\n", $1, $2, $3}'

  # loop through all repos in ReposPath
  for i in `ls {{ ReposPath }}`; do 
    cd {{ ReposPath }}/$i
    git status > /dev/null 2>&1
    if [ $? -gt 0 ]; then
      printf "$i \033[1;30mnot~a~repo\033[0;m" | \
      awk '{printf "%-50s %s\n", $1, $2}' | \
      sed "s/ /./g;s/\([A-z0-9]\)\.\./\1 \./;s/\.\.\([^\.]\)/\. \1/;s/~/ /g"
      continue
    else
      LSTAT=$([ `git status --porcelain | wc -l` -gt 0 ] && printf "\033[0;31mdirty\033[0;m" || printf "\033[0;32mclean\033[0;m")
      if [ `git remote -v | wc -l` -lt 1 ]; then
        RSTAT=$(printf "\033[1;30morphaned\033[0;m")
      else
        git fetch > /dev/null 2>&1
        LOCAL=$(git rev-parse @)
        git rev-parse @{u} > /dev/null 2>&1
        if [ $? -gt 0 ]; then
          git branch --set-upstream-to=origin/master master > /dev/null 2>&1
        fi
        REMOTE=$(git rev-parse @{u})
        BASE=$(git merge-base @ @{u})
        if [ "ZZ$LOCAL" = "ZZ$REMOTE" ]; then
          RSTAT=$(printf "\033[0;32mcurrent\033[0;m")
        elif [ "ZZ$LOCAL" = "ZZ$BASE" ]; then
          RSTAT=$(printf "\033[0;31mbehind\033[0;m")
        elif [ $REMOTE = $BASE ]; then
          RSTAT=$(printf "\033[1;33mahead\033[0;m")
        else
          RSTAT=$(printf "\033[0;33mdiverged\033[0;m")
        fi
      fi
      echo "$i $LSTAT~$RSTAT" | awk '{printf "%-50s %s\n", $1, $2}' | sed "s/ /./g;s/\([A-z0-9]\)\.\./\1 \./;s/\.\.\([^\.]\)/\. \1/;s/~/ /"
    fi
  done

  # drop back into the working dir
  cd $CWD

}
