# CodeCompanion workspace file
snippet ws "codecompanion workspace file (.codecompanion/workspace.json)" b
	{
	  "name": "${1:`substitute(fnamemodify(getcwd(), ':t'), '^\w', '\u&', '')`}",
	  "version": "1.0.0",
	  "description": "${2:Brief description of what this project does}",
	  "system_prompt": "This project ${3:follows specific patterns and conventions documented in the memory files}.",
	  "vars": {
	    "docs_path": "docs"
	  },
	  "groups": [
	    {
	      "name": "${4:Core Features}",
	      "description": "The main functionality of ${1}",
	      "data": ["${5:main-module}"]
	    }
	  ],
	  "data": {
	    "${5}": {
	      "type": "file",
	      "path": "${6:src/main.py}",
	      "description": "The main entry point for ${1}"
	    }
	  }
	}

snippet con "codecompanion project context markdown (docs/context.md)" b
	# Project Context

	## What This Project Does
	${1:Brief description of the project's purpose and value}

	## Key Goals & Constraints
	- ${2:Primary objective}
	- ${3:Key constraint or requirement}
	- ${4:Success criteria}

	## Architecture Overview
	${5:High-level system design, key components, data flow}

	## Technology Choices
	- **Language/Framework:** ${6:Technology and rationale}
	- **Key Dependencies:** ${7:Important libraries and why chosen}
	- **Deployment:** ${8:How the project is deployed/distributed}

	## Getting Oriented
	- **Entry Point:** ${9:Where to start reading the code}
	- **Key Files:** ${10:Most important files to understand}
	- **Configuration:** ${11:How the project is configured}

snippet dec "key decisions markdown (docs/decisions.md)" b
	# Key Decisions

	## Decision Log Format
	### [Date] - Decision Title
	**Context:** Why this decision was needed
	**Decision:** What was decided
	**Rationale:** Why this approach was chosen
	**Impact:** Expected outcomes and trade-offs

	## Active Decisions

	### ${1:`strftime("%Y-%m-%d")`} - ${2:Decision Title}
	**Context:** ${3:Why this decision was needed}
	**Decision:** ${4:What was decided}
	**Rationale:** ${5:Why this approach was chosen over alternatives}
	**Impact:** ${6:Expected outcomes, trade-offs, or implications}

snippet pat "code patterns & conventions markdown (docs/patterns.md)" b
	# Code Patterns & Conventions

	## File Organization
	${1:How code is structured and where different types of files go}

	## Naming Conventions
	- **Files:** ${2:file_naming_pattern}
	- **Functions:** ${3:function_naming_pattern}
	- **Variables:** ${4:variable_naming_pattern}
	- **Classes:** ${5:ClassName pattern}

	## Common Patterns

	### Error Handling
	${6:How errors are typically handled in this codebase}

	### Data Flow
	${7:Common patterns for how data moves through the system}

	### Configuration
	${8:How configuration is managed and accessed}

	### Testing
	${9:Testing conventions and patterns used}

	## Code Examples

	### ${10:Pattern Name}
	```${11:language}
	${12:// Example code showing the pattern}
	```

	${13:Brief explanation of when and why to use this pattern}

snippet bls "codecompanion buffer lsp snippet" b
	#{buffer}#{lsp} ${0}

snippet editorconfig "baseline editorconfig" b
	# See https://EditorConfig.org

	# set as top-most .enditorconfig file
	root = true

	# general configs
	[*]
	charset = utf-8
	end_of_line = lf
	insert_final_newline = true
	trim_trailing_whitespace = true
	indent_style = space
	indent_size = 2

	# 4 space indentation
	[*.{py,js,ts}]
	indent_style = space
	indent_size = 4

	# tab indentation (no size specified)
	[Makefile]
	indent_style = tab

snippet unit "systemd service unit file" b
	[Unit]
	Description=${1:My Miscellaneous Service}
	After=network.target

	[Service]
	Type=simple
	# Another Type: forking
	User=${2:root}
	WorkingDirectory=${3:/opt}
	Environment="SECRET=abababababababab"
	Environment="ANOTHER_SECRET=erererererereree"
	ExecStart=${4:/usr/local/bin/executable --param}
	StandardOutput=append:/var/log/${5:app}-out.log
	StandardError=append:/var/log/$5-err.log
	Restart=on-failure
	# Other restart options: always, on-abort, etc

	# The install section is needed to use
	# \`systemctl enable\` to start on boot
	# For a user service that you want to enable
	# and start automatically, use \`default.target\`
	# For system level services, use \`multi-user.target\`
	[Install]
	WantedBy=multi-user.target

snippet make "makefile template" b
	# turn all subsequent targets after some targets into arguments for command
	FIRSTWORD=$(firstword $(MAKECMDGOALS))
	ifeq ($(FIRSTWORD), $(filter $(FIRSTWORD), one, two))
	  # use the remaining targets as arguments
	  CMD_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
	  # and turn them into null / do-nothing targets
	  $(eval $(CMD_ARGS):;@:)
	endif

	# set ALL targets to be PHONY
	.PHONY: $(shell sed -n -e '/^$$/ { n ; /^[^ .\#][^ ]*:/ { s/:.*$$// ; p ; } ; }' $(MAKEFILE_LIST))

	# text output decoration
	B="$$(tput bold)"
	UN="$$(tput smul)"
	NU="$$(tput rmul)"
	DIM="$$(tput dim)"

	# text output color
	RED="$$(tput setaf 1)"
	GRN="$$(tput setaf 2)"
	YLW="$$(tput setaf 3)"
	BLU="$$(tput setaf 4)"
	MGT="$$(tput setaf 5)"
	CYN="$$(tput setaf 6)"

	# reset terminal output
	NRM="$$(tput sgr0)"

	default:
		@printf "\n\
		\
		  $(DIM)usage:$(NRM)  $(B)make <command>$(NRM)\n\n\
		\
		  $(DIM)commands:$(NRM)\n\n\
		\
		    $(B)$(BLU)$(UN)Section:$(NRM)\n\n\
		\
		    $(B)$(GRN)init$(NRM)                 $(GRN)Setup the repository for development$(NRM)\n\n\
		    $(B)$(RED)clean$(NRM)                $(RED)Delete generated assets and helpers$(NRM)\n\n"

	init:
		@printf "${B}${UN}${BLU}Initializing the repo:${NRM}\n"
		cp tools/pre-commit .git/hooks/pre-commit
		chmod 755 .git/hooks/pre-commit

	one:
		@printf "${B}${UN}${BLU}Target one with args:${NRM}\n"
		echo $(CMD_ARGS)

	two:
		@printf "${B}${UN}${BLU}Target two with args:${NRM}\n"
		echo $(CMD_ARGS)

snippet init "init script template" b
	#!/bin/sh
	### BEGIN INIT INFO
	# Provides: ${1:service}
	# Required-Start: $remote_fs $syslog
	# Required-Stop: $remote_fs $syslog
	# Default-Start: 2 3 4 5
	# Default-Stop: 0 1 6
	# Short-Description: Start daemon at boot time
	# Description: Enable service provided by daemon.
	### END INIT INFO

	dir="${2:/path/to/app/root}"
	cmd="${3:cmd -to execute}"
	user="${4:user to run as}"

	name=\`basename \$0\`
	pid_file="/var/run/$name.pid"
	stdout_log="/var/log/$name.log"
	stderr_log="/var/log/$name.err"

	get_pid() {
	    cat "$pid_file"
	}

	is_running() {
	    [ -f "$pid_file" ] && ps \`get_pid\` > /dev/null 2>&1
	}

	case "\$1" in
	    start)
	    if is_running; then
	        echo "Already started"
	    else
	        echo "Starting $name"
	        cd "$dir"
	        if [ -z "$user" ]; then
	            sudo $cmd >> "$stdout_log" 2>> "$stderr_log" &
	        else
	            sudo -u "$user" $cmd >> "$stdout_log" 2>> "$stderr_log" &
	        fi
	        echo $! > "$pid_file"
	        if ! is_running; then
	            echo "Unable to start, see $stdout_log and $stderr_log"
	            exit 1
	        fi
	    fi
	    ;;
	    stop)
	    if is_running; then
	        echo -n "Stopping $name.."
	        kill \`get_pid\`
	        for i in {1..10}
	        do
	            if ! is_running; then
	                break
	            fi

	            echo -n "."
	            sleep 1
	        done
	        echo

	        if is_running; then
	            echo "Not stopped; may still be shutting down or shutdown may have failed"
	            exit 1
	        else
	            echo "Stopped"
	            if [ -f "$pid_file" ]; then
	                rm "$pid_file"
	            fi
	        fi
	    else
	        echo "Not running"
	    fi
	    ;;
	    restart)
	    \$0 stop
	    if is_running; then
	        echo "Unable to stop, will not attempt to start"
	        exit 1
	    fi
	    \$0 start
	    ;;
	    status)
	    if is_running; then
	        echo "Running"
	    else
	        echo "Stopped"
	        exit 1
	    fi
	    ;;
	    *)
	    echo "Usage: \$0 {start|stop|restart|status}"
	    exit 1
	    ;;
	esac

snippet tmuxl "project .tmux boilerplate (left)" b
	#!/bin/bash
	#
	# .--------------------------------------.
	# |                      |               |
	# |                      |       2       |
	# |                      |               |
	# |           1          |---------------|
	# |                      |               |
	# |                      |       3       |
	# |                      |               |
	# '--------------------------------------'

	CMDPANE1='${1:vim -c CommandT}'
	CMDPANE2='${2:git status}'
	CMDPANE3='${3}'

	# get session name based on folder
	SESSION=\`basename $(pwd) | sed 's/\.//g' | tr '[:upper:]' '[:lower:]'\`

	# attach if session already exists
	if tmux has-session -t $SESSION 2> /dev/null; then
	  tmux -u attach -t $SESSION
	  exit
	fi

	# else create a new session
	tmux new-session -d -s $SESSION -n main -x $(tput cols) -y $(tput lines)

	# build out panes
	tmux split-window -t ${SESSION}:main.1 -h -l 45%
	tmux split-window -t ${SESSION}:main.2 -v -l 60%

	# run commands
	tmux send-keys -t ${SESSION}:main.1 "$CMDPANE1" Enter
	tmux send-keys -t ${SESSION}:main.2 "$CMDPANE2" Enter
	tmux send-keys -t ${SESSION}:main.3 "$CMDPANE3" Enter

	# attach to the new session, focus left pane
	tmux -u attach -t ${SESSION}:main.1

snippet tmux "project .tmux boilerplate (right)" b
	#!/bin/bash
	#
	# .--------------------------------------.
	# |                 |                    |
	# |        1        |                    |
	# |                 |                    |
	# |-----------------|          3         |
	# |                 |                    |
	# |        2        |                    |
	# |                 |                    |
	# '--------------------------------------'

	CMDPANE1='${1:git status}'
	CMDPANE2='${2}'
	CMDPANE3='${3:vim -c CommandT}'

	# get session name based on folder
	SESSION=\`basename $(pwd) | sed 's/\.//g' | tr '[:upper:]' '[:lower:]'\`

	# attach if session already exists
	if tmux has-session -t $SESSION 2> /dev/null; then
	  tmux -u attach -t $SESSION
	  exit
	fi

	# else create a new session
	tmux new-session -d -s $SESSION -n main -x $(tput cols) -y $(tput lines)

	# build out panes
	tmux split-window -t ${SESSION}:main.1 -h -l 55%
	tmux split-window -t ${SESSION}:main.1 -v -l 60%

	# run commands
	tmux send-keys -t ${SESSION}:main.1 "$CMDPANE1" Enter
	tmux send-keys -t ${SESSION}:main.2 "$CMDPANE2" Enter
	tmux send-keys -t ${SESSION}:main.3 "$CMDPANE3" Enter

	# attach to the new session, focus left pane
	tmux -u attach -t ${SESSION}:main.3
