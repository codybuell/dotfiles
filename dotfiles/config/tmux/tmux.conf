# Tested on tmux version 3.5.a

# NOTE: Not working because I'm on 3.5a, which fails to parse the version string
# %hidden TMUX_VERSION="#{s|next-||:#{version}}"
# %hidden IS_TMUX_3_3_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.3}"
# %hidden IS_TMUX_3_4_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.4}"
# %hidden IS_TMUX_3_5_OR_ABOVE="#{e|>=|f|0:$TMUX_VERSION,3.5}"

################################################################################
#                                                                              #
# General Configs                                                              #
#                                                                              #
################################################################################

# Manually handle clipboard management
set-option -g set-clipboard off

# Don't wait for escape key as part of a key sequence
set -sg escape-time 0

# Capture some more history
set -g history-limit 50000

# Don't wrap searches
set-window-option -g wrap-search off

# Only show pane numbers for 300 milliseconds
set -g display-panes-time 300

# Make tinted-shell work by turning passthrough of escape sequences.
# (Needed on tmux 3.3 and later).
# Also, `yazi`: https://yazi-rs.github.io/docs/image-preview/
set-option -g allow-passthrough all

################################################################################
##                                                                            ##
##  Theming                                                                   ##
##                                                                            ##
################################################################################

source-file ~/.config/tmux/theme.conf
source-file ~/.config/tmux/colors.conf

################################################################################
##                                                                            ##
##  Windowing                                                                 ##
##                                                                            ##
################################################################################

# automatically renumber window numbers on closing a pane (tmux >= 1.7)
set -g renumber-windows on

# start window and pane numbering at 1
set -g base-index 1
set -g pane-base-index 1

# dynamically update iTerm tab and window titles
set -g set-titles on

# define the window title format
set -g set-titles-string "#T : #h > #S > #W"

# send focus events through
set -g focus-events on

# set the window list format in status bar
set -g window-status-format "#I:#{window_panes} #W#F"
set -g window-status-current-format "#I:#{window_panes} #W#F"
set -g window-status-separator "  "

# flag activity in the window list
setw -g monitor-activity on

################################################################################
#                                                                              #
# Status Bar                                                                   #
#                                                                              #
################################################################################

# status bar left side
set-option -g status-left-length 100
set-option -g status-left ' #S   ⧉ #I/#{session_windows} ⊞ #P/#{window_panes}   '

# status bar right side
set-option -g status-right-length 100
set-option -g status-right "#[fg=yellow] #(pmset -g batt | awk 'NR==2 {print $3}' | sed 's/\;//') #[fg=blue] [#{pane_width}x#{pane_height}] #[fg=brightgreen] %H:%M #[fg=white] #(date -u '+%%H:%%M %%d-%%b-%%y') "

################################################################################
##                                                                            ##
##  Copy Mode                                                                 ##
##                                                                            ##
################################################################################

set-option -g pane-border-lines single
set-option -g pane-border-status bottom

# disable the position indicator in copy mode
set-hook -g pane-mode-changed {
  if-shell -F '$IS_COPY_MODE' {
    send-keys -X toggle-position
  }
}

# Override default for `v` (`send-keys -X rectangle-toggle`).
bind-key -T copy-mode-vi v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL_BLOCK}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL_BLOCK or VISUAL_LINE mode, go to vanilla VISUAL mode.
      send-keys -X rectangle-off
      set-option -g @mode $VISUAL
    } {
      # We appear to be in VISUAL mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL mode.
    send-keys -X rectangle-off
    send-keys -X begin-selection
    set-option -g @mode $VISUAL
  }

# Ditto for C-v.
bind-key -T copy-mode-vi C-v if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_LINE}}}' {
      # If in VISUAL or VISUAL_LINE mode, go to VISUAL_BLOCK mode.
      send-keys -X rectangle-on
      set-option -g @mode $VISUAL_BLOCK
    } {
      # We appear to be in VISUAL_BLOCK mode; go back to NORMAL mode.
      send-keys -X rectangle-off
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_BLOCK mode.
    send-keys -X rectangle-on
    send-keys -X begin-selection
    set-option -g @mode $VISUAL_BLOCK
  }

# Similar for `V`.
bind-key -T copy-mode-vi V if-shell -F '#{selection_present}' {
    if-shell -F '#{||:#{==:#{@mode},#{VISUAL}},#{==:#{@mode},#{VISUAL_BLOCK}}}' {
      # If in VISUAL or VISUAL_BLOCK mode, go to VISUAL_LINE mode.
      # (Sadly, doesn't exactly match Vim's behavior, because it starts a new
      # linewise selection instead of adjusting the existing selection.)
      send-keys -X rectangle-off
      send-keys -X select-line
      set-option -g @mode $VISUAL_LINE
    } {
      # We appear to be in VISUAL_LINE mode; go back to NORMAL mode.
      send-keys -X clear-selection
      set-option -g @mode $NORMAL
    }
  } {
    # If in NORMAL mode, start VISUAL_LINE mode.
    send-keys -X rectangle-off
    send-keys -X select-line
    set-option -g @mode $VISUAL_LINE
  }

# Show copy mode info in pane border.
#
# We show position as offset from top of history to make it less confusing (tmux
# usually shows offset from bottom).
#
# - #{?condition,consequent,else} is ternary syntax.
# - #{e|-|:x,y} does our arithmetic, `history_size` - `scroll_position`.
# - #, is used to escape one of the commas inside the "consequent" format of
#   the ternary syntax (without this, the format breaks); funnily enough,
#   escaping is _not_ needing in the "else" format (and including it breaks the
#   format).
# - On next-3.5 and above, we can show `#{search_count}` and
#   `#{search_count_partial}`; this latter is used to show "+" after the count
#   in the event that the search times out without completing (I've never seen
#   this in practice).
# - #{e|>|:x,y} is used to check if `#{search_count}` is greater than zero.
#   and to check if #{search_count_partial}` is non-zero (in practice, it should
#   only ever be 0 or 1).
# - #{==:x,y} is used to check if `#{search_count}` is 1; this is used to decide
#   whether to render "1 result" (singular) or "N results" (plural).
# - #{&&:a,b} is used along with ternary syntax to indicate when our
#   `search_count` is greater than zero and `#{search_present}` is also true
#   (otherwise we'd show the count of the last successful match instead of the
#   current match).
#
# If we get a format that would allow us to know when a search is active, we
# could show a Neovim-style indicator in the middle:
#
#   #[fg=red,align=centre]"Pattern not found: #{pane_search_string}#[default]"
#
# We can't do that right now because `pane_search_string` is set even in the
# absence of a search, `search_match` is true only if the cursor is on a match,
# and although `search_present` will tell us if there is a match anywhere,
# that's not useful if we don't know that a search is active.
#
%hidden IS_COPY_MODE="#{==:#{pane_mode},copy-mode}"
%hidden COPY_MODE_MARKER="#[align=left#,fg=green#,bg=black]  -- COPY --  #[default]"
%hidden COPY_MODE_LEFT="$COPY_MODE_MARKER"
%hidden HAS_SEARCH_RESULT="#{&&:#{e|>|:#{search_count},0},#{search_present}}"
%hidden RESULT_OR_RESULTS="result#{?#{==:#{search_count},1},,s}"
%hidden RESULT_COUNT_IS_PARTIAL="#{e|>|:#{search_count_partial},0}"
%hidden SEARCH_RESULT_COUNT="(#{search_count}#{?$RESULT_COUNT_IS_PARTIAL,+,} $RESULT_OR_RESULTS)"
%hidden OFFSET_FROM_TOP="#{e|-|:#{history_size},#{scroll_position}}"
%hidden COPY_MODE_LOCATION="[$OFFSET_FROM_TOP/#{history_size}]"
%hidden COPY_MODE_CENTER="#[align=centre#,bg=black]#[default]"

# %if $IS_TMUX_3_5_OR_ABOVE
%hidden COPY_MODE_RIGHT="#[align=right#,bg=black]  #{?$HAS_SEARCH_RESULT,$SEARCH_RESULT_COUNT  ,}$COPY_MODE_LOCATION  #[default]"
# %else
# %hidden COPY_MODE_RIGHT="#[align=right#,bg=black]  $COPY_MODE_LOCATION  #[default]"
# %endif

set-option -g pane-border-format "#{?$IS_COPY_MODE,$COPY_MODE_LEFT$COPY_MODE_CENTER$COPY_MODE_RIGHT,}"

# %if $IS_TMUX_3_4_OR_ABOVE
# Use OSC-133 sequences to navigate between prompts.
bind-key o {
  copy-mode
  send-keys -X previous-prompt
}
bind-key -T copy-mode-vi -r o {
  send-keys -X previous-prompt
}
bind-key i {
  copy-mode
  send-keys -X next-prompt
}
bind-key -T copy-mode-vi -r i {
  send-keys -X next-prompt
}
# %endif

################################################################################
#                                                                              #
#  MOUSE                                                                       #
#                                                                              #
#  Shift + Mouse drag to use terminal native selection, else will enter        #
#  tmux copy mode.                                                             #
#                                                                              #
#  MOUSEDOWN1  --->  MouseDown1         MOUSEDRAG1     --->  MouseDrag1        #
#  MOUSEDOWN2  --->  MouseDown2         MOUSEDRAG2     --->  MouseDrag2        #
#  MOUSEDOWN3  --->  MouseDown3         MOUSEDRAG3     --->  MouseDrag3        #
#  MOUSEUP1    --->  MouseUp1           MOUSEDRAGEND1  --->  MouseDragEnd1     #
#  MOUSEUP2    --->  MouseUp2           MOUSEDRAGEND2  --->  MouseDragEnd2     #
#  MOUSEUP3    --->  MouseUp3           MOUSEDRAGEND3  --->  MouseDragEnd3     #
#  WHEELUP     --->  WheelUp            WHEELDOWN      --->  WheelDown         #
#                                                                              #
#  Each should be combined with a suffix to id location, Pane, Status, etc.    #
#                                                                              #
################################################################################

# Enable mouse support
set-option -g mouse on

##############################
#  Disable Default Behavior  #
##############################

# Unbind all double and triple clicks
unbind-key -T copy-mode-vi DoubleClick1Pane
unbind-key -T copy-mode-vi TripleClick1Pane
unbind-key -T root DoubleClick1Pane
unbind-key -T root TripleClick1Pane
unbind-key -T copy-mode DoubleClick1Pane
unbind-key -T copy-mode TripleClick1Pane

# Remove default middle-click behavior
unbind-key -T root MouseUp2Pane
unbind-key -T copy-mode-vi MouseUp2Pane

# Remove default drag-end behavior to prevent exiting copy mode
unbind-key -T copy-mode-vi MouseDragEnd1Pane

###########################
#  Mouse Wheel Scrolling  #
###########################

# Scroll 3 lines at a time with mouse wheel (default is 5)
# Clear any existing selection before scrolling to prevent extending selections
bind-key -T copy-mode-vi WheelUpPane send-keys -X clear-selection \; send-keys -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X clear-selection \; send-keys -X -N 3 scroll-down

########################
#  Copy Mode Bindings  #
########################

# Allow Escape to exit copy mode (in addition to default C-c and q)
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Middle-click: exit copy mode and paste, or just paste in normal mode
bind-key -T copy-mode-vi MouseUp2Pane send-keys -X cancel \; paste-buffer

###########################
#  Copy Bindings (macOS)  #
###########################

# Copy selected text to system clipboard when mouse drag ends
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "reattach-to-user-namespace\ pbcopy"

# Double-click: select word and copy to clipboard
bind-key -T copy-mode-vi DoubleClick1Pane \
  if-shell -Ft"{mouse}" "#{alternate_on}" \
    "send-keys -M" \
    "send-keys -t\"{mouse}\" -X select-word \; send-keys -X copy-pipe-no-clear \"reattach-to-user-namespace\ pbcopy\""

bind-key -T root DoubleClick1Pane \
  if-shell -Ft"{mouse}" "#{alternate_on}" \
    "send-keys -M" \
    "copy-mode -t\"{mouse}\" \; send-keys -t\"{mouse}\" -X select-word \; send-keys -X copy-pipe-no-clear \"reattach-to-user-namespace\ pbcopy\""

# Triple-click: select entire line and copy to clipboard
bind-key -T copy-mode-vi TripleClick1Pane \
  if-shell -Ft"{mouse}" "#{alternate_on}" \
    "send-keys -M" \
    "send-keys -t\"{mouse}\" -X select-line \; send-keys -X copy-pipe-no-clear \"reattach-to-user-namespace\ pbcopy\""

bind-key -T root TripleClick1Pane \
  if-shell -Ft"{mouse}" "#{alternate_on}" \
    "send-keys -M" \
    "copy-mode -t\"{mouse}\" \; send-keys -t\"{mouse}\" -X select-line \; send-keys -X copy-pipe-no-clear \"reattach-to-user-namespace\ pbcopy\""

###########################
#  Copy Bindings (Linux)  #
###########################

# # Copy selected text to system clipboard when mouse drag ends
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-no-clear "xclip"
#
# # Double-click: select word and copy to clipboard
# bind-key -T copy-mode-vi DoubleClick1Pane \
#   if-shell -Ft"{mouse}" "#{alternate_on}" \
#     "send-keys -M" \
#     "send-keys -t\"{mouse}\" -X select-word \; send-keys -X copy-pipe-no-clear \"xclip\""
#
# bind-key -T root DoubleClick1Pane \
#   if-shell -Ft"{mouse}" "#{alternate_on}" \
#     "send-keys -M" \
#     "copy-mode -t\"{mouse}\" \; send-keys -t\"{mouse}\" -X select-word \; send-keys -X copy-pipe-no-clear \"xclip\""
#
# # Triple-click: select entire line and copy to clipboard
# bind-key -T copy-mode-vi TripleClick1Pane \
#   if-shell -Ft"{mouse}" "#{alternate_on}" \
#     "send-keys -M" \
#     "send-keys -t\"{mouse}\" -X select-line \; send-keys -X copy-pipe-no-clear \"xclip\""
#
# bind-key -T root TripleClick1Pane \
#   if-shell -Ft"{mouse}" "#{alternate_on}" \
#     "send-keys -M" \
#     "copy-mode -t\"{mouse}\" \; send-keys -t\"{mouse}\" -X select-line \; send-keys -X copy-pipe-no-clear \"xclip\""

################################################################################
##                                                                            ##
##  Plugins                                                                   ##
##                                                                            ##
################################################################################

run-shell ~/.config/tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell ~/.config/tmux/plugins/tmux-continuum/continuum.tmux

################################################################################
#                                                                              #
# BINDINGS                                                                     #
#                                                                              #
################################################################################

# remap prefix to ctrl + space
unbind-key C-b
set -g prefix C-Space
bind-key Space send-prefix

# use vi navigation and search in scroll mode ctrl-b [
setw -g mode-keys vi
set -g status-keys vi
bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

# pre-defined sessions ctrl-b [N]
bind-key A source-file ~/.config/tmux/scripts/administration
bind-key D source-file ~/.config/tmux/scripts/development
bind-key L source-file ~/.config/tmux/scripts/logs
bind-key G source-file ~/.config/tmux/scripts/gifcast
bind-key W source-file ~/.config/tmux/scripts/work

# balance splits
unbind-key h
unbind-key v
bind-key h select-layout even-horizontal
bind-key v select-layout even-vertical

# toggle popup window
bind-key P if-shell -F '#{==:#{session_name},HOME}' { detach-client } \
    { popup -w85% -h85% -E 'tmux attach -t HOME || tmux new -s HOME' }

# clear panes
unbind-key y
bind-key y set-window-option synchronize-panes on\; send-keys clear\r\; set-window-option synchronize-panes off

# toggle synchronize panes
bind-key S set-window-option synchronize-panes

# reload config file with ctrl-b r
bind-key r source-file ~/.config/tmux/tmux.conf

# sessions
bind-key C new-session
bind-key L switch-client -l

################################################################################
##                                                                            ##
##  Problematic Bindings                                                      ##
##                                                                            ##
##  The following should be kept at the bottom of the file. While they are    ##
##  "correct" in that they work, something about them break the syntax        ##
##  highlighting provided by treesitter and causes all subsequent configs     ##
##  to be garbled in the editor highlighting wise.                            ##
##                                                                            ##
################################################################################

# Smart pane switching with awareness of Vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# rebind splits so that they open with the same dir
bind-key '"' split-window -c '#{pane_current_path}'
bind-key % split-window -h -c '#{pane_current_path}'
